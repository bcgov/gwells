"""
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
import logging

from django.shortcuts import render
from django.views.generic import TemplateView
from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from rest_framework.mixins import CreateModelMixin, UpdateModelMixin
from rest_framework.generics import RetrieveUpdateDestroyAPIView, ListCreateAPIView
from rest_framework import exceptions

from gwells.serializers import SurveySerializer
from gwells.models import Survey
from gwells.permissions import SurveysEditOrReadOnly
from gwells.roles import SURVEYS_EDIT_ROLE

from submissions.models import WellActivityCode


logger = logging.getLogger(__name__)


class AuditCreateMixin(CreateModelMixin):
    """
    Adds create_user when instances are created.
    Create date is inserted in the model, and not required here.
    """

    def perform_create(self, serializer):
        if self.request.user.profile.username is None:
            raise exceptions.ValidationError(('Username must be set.'))

        serializer.validated_data['create_user'] = self.request.user.profile.username
        serializer.validated_data['update_user'] = self.request.user.profile.username
        return super().perform_create(serializer)


class AuditUpdateMixin(UpdateModelMixin):
    """
    Adds update_user when instances are updated
    Update date is inserted in the model, and not required here.
    """

    def perform_update(self, serializer):
        if self.request.user.profile.username is None:
            raise exceptions.ValidationError(('Username must be set.'))

        serializer.validated_data['update_user'] = self.request.user.profile.username
        return super().perform_update(serializer)


class HealthView(TemplateView):
    def health(request, **kwargs):
        return HttpResponse(WellActivityCode.objects.count())


class SurveyListCreateView(ListCreateAPIView):
    """
    get:
    Returns a list of active surveys.
    """

    serializer_class = SurveySerializer
    queryset = Survey.objects.all()
    pagination_class = None
    permission_classes = (SurveysEditOrReadOnly,)

    def get_queryset(self):
        user_is_staff = self.request.user.groups.filter(name=SURVEYS_EDIT_ROLE).exists()

        if not user_is_staff:
            return self.queryset.filter(survey_enabled=True)

        return super().get_queryset()


class SurveyUpdateDeleteView(RetrieveUpdateDestroyAPIView):
    """ Handler for updating and deleting surveys. """
    serializer_class = SurveySerializer
    queryset = Survey.objects.all()
    pagination_class = None
    permission_classes = (SurveysEditOrReadOnly,)
    lookup_field = "survey_guid"

    def get_queryset(self):
        user_is_staff = self.request.user.groups.filter(name=SURVEYS_EDIT_ROLE).exists()

        if not user_is_staff:
            return self.queryset.filter(survey_enabled=True)

        return super().get_queryset()


@require_http_methods(["GET"])
def index(request, **kwargs):
    # Serve up the index.html generated by vue as a template.
    # This is not ideal, consider switching serving up of Vue.js entirely to caddy.
    return render(request, 'index.html')
