# Generated by Django 2.1.5 on 2019-01-22 00:35

import os
from zipfile import ZipFile
import shutil

import django.contrib.gis.db.models.fields
from django.db import migrations, models
from django.contrib.gis.gdal import DataSource
from django.contrib.gis.utils import LayerMapping
from django.db import connection


def border_data(apps, schema_editor):
    # This border data sourced from iMapBC, specifically the "Province of BC - ABMS - Outlined" layer.
    # Shapefile inspected using:
    # ogrinfo -so gwells/migrations/ABMS_PROVINCE_SP/ABMS_PROV_polygon.shp ABMS_PROV_polygon
    # Model and mapping generated using:
    # python manage.py ogrinspect gwells/migrations/ABMS_PROVINCE_SP/ABMS_PROV_polygon.shp gwells.Border --srid=4269 --mapping --multi
    Border = apps.get_model('gwells', 'Border')

    zip_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '0010_BCGW_ABMS_PROV.zip')
    with ZipFile(zip_path, 'r') as zipObj:
        zipObj.extractall(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tmp'))

    border_shp = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                              'tmp/ABMS_PROVINCE_SP/ABMS_PROV_polygon.shp')
    if not os.path.exists(border_shp):
        raise FileNotFoundError('file not found: {}'.format(border_shp))

    border_mapping = {
        'se_a_c_flg': 'SE_A_C_FLG',
        'obejctid': 'OBEJCTID',
        'shape': 'SHAPE',
        'length_m': 'LENGTH_M',
        'oic_number': 'OIC_NUMBER',
        'area_sqm': 'AREA_SQM',
        'upt_date': 'UPT_DATE',
        'upt_type': 'UPT_TYPE',
        'chng_org': 'CHNG_ORG',
        'aa_parent': 'AA_PARENT',
        'aa_type': 'AA_TYPE',
        'aa_id': 'AA_ID',
        'aa_name': 'AA_NAME',
        'abrvn': 'ABRVN',
        'bdy_type': 'BDY_TYPE',
        'oic_year': 'OIC_YEAR',
        'afctd_area': 'AFCTD_AREA',
        'geom': 'MULTIPOLYGON25D',
    }

    lm = LayerMapping(Border, border_shp, border_mapping, transform=False)
    lm.save(strict=True, verbose=True)

    # Now clean up
    shutil.rmtree(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tmp'))


def reverse_border_data(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('gwells', '0009_auto_20181116_2316'),
    ]

    operations = [
        migrations.CreateModel(
            name='Border',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('se_a_c_flg', models.CharField(max_length=254)),
                ('obejctid', models.FloatField()),
                ('shape', models.FloatField()),
                ('length_m', models.FloatField()),
                ('oic_number', models.CharField(max_length=7)),
                ('area_sqm', models.FloatField()),
                ('upt_date', models.CharField(max_length=20)),
                ('upt_type', models.CharField(max_length=50)),
                ('chng_org', models.CharField(max_length=30)),
                ('aa_parent', models.CharField(max_length=100)),
                ('aa_type', models.CharField(max_length=50)),
                ('aa_id', models.BigIntegerField()),
                ('aa_name', models.CharField(max_length=100)),
                ('abrvn', models.CharField(max_length=40)),
                ('bdy_type', models.CharField(max_length=20)),
                ('oic_year', models.CharField(max_length=4)),
                ('afctd_area', models.CharField(max_length=120)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4269)),
            ],
        ),
        migrations.RunPython(border_data, reverse_code=reverse_border_data),
    ]
