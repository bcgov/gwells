# Generated by Django 2.2.28 on 2023-07-13 18:50

from django.db import migrations, models
import json 
import requests
from django.contrib.gis.geos import GEOSGeometry
from requests.exceptions import HTTPError

# This Django migration is aimed at populating 'geom' (geographic location) field
# for 'Organization' instances based on their street_address, city and state
# if not already populated.
# We also update the new field 'regional_areas' to associate each organization
# with regional areas that contain its location.
# We use the BC Physical Address Geocoder API to geolocate the organizations.

def populate_regional_areas(apps, schema_editor):
    Organization = apps.get_model('registries', 'Organization')
    RegionalArea = apps.get_model('registries', 'RegionalArea')

    # We iterate over each Organization instance
    for org in Organization.objects.all():

        # If 'geom' field is None and we have sufficient data to attempt geocoding
        if org.geom is None and org.street_address and org.city and org.province_state and \
            org.province_state.province_state_code == "BC":
            
            # Attempt to geocode using street_address + city
            try:
                point = geocode_bc_location({                        
                  "addressString": org.street_address, 
                  "localityName": org.city,
                  "localities": org.city
                })
            except (HTTPError, ValueError):
                # If above fails, attempt to geocode using city only
                try:
                    point = geocode_bc_location({                        
                      "localityName": org.city,
                      "localities": org.city,
                      "matchPrecision": "LOCALITY"
                    })
                except (HTTPError, ValueError):
                    # If both geocoding attempts fail, print an error and move on
                    point = None
                    print(f"Geolocation unsuccessful. Unable to determine coordinates for Organization: {org.name}.")

            # If geocoding was successful, update 'geom' field of the organization
            if point:
                print(f"Geolocation successful. Coordinates determined for Organization: {org.name}.")
                org.geom = point
                org.save()

        # After attempting to update 'geom', we iterate over each RegionalArea instance
        for area in RegionalArea.objects.all():
            # Skip if either 'geom' field is None
            if area.geom is None or org.geom is None:
                continue

            # If the area contains the organization's location, associate the two
            if area.geom.contains(org.geom):
                org.regional_areas.add(area)


class Migration(migrations.Migration):

    dependencies = [
        ('registries', '0007_regional_area'),
    ]

    operations = [
        migrations.AddField(
            model_name='organization',
            name='regional_areas',
            field=models.ManyToManyField(blank=True, related_name='organizations', to='registries.RegionalArea'),
        ),
        migrations.RunPython(populate_regional_areas),
    ]

def geocode_bc_location(options={}):
    """
    Makes an HTTP call to the BC Physical Address Geocoder API
    (https://www2.gov.bc.ca/gov/content/data/geographic-data-services/location-services/geocoder)
    using any options provided as query string parameters. (the 'options'
    parameter supports any query string parameter supported by the "addresses.json" 
    endpoint.
    If the address is successfully geocoded then this method returns a 
    django.contrib.gis.geos.Point object corresponding to the first result.  
    If a HTTP error occurs during 
    communication with the remote API then an HTTPError exception is 
    raised.  If the API call succeeds but does not find a coordinate 
    matching the given address_string, then a ValueError is raised.
    :param options: typical options are:
      {
        "addressString": "101 main st.",
        "localityName": "Kelowna"
      }
    """
    default_options = {
      "provinceCode": "BC",
      "outputSRS": 4326,
      "maxResults": 1,
      "minScore": 65
    }
    params = {}
    params.update(default_options)
    params.update(options)

    url = "https://geocoder.api.gov.bc.ca/addresses.json"
        
    try:
        resp = requests.get(url, params=params, timeout=10)
        resp.raise_for_status()
    except HTTPError as e:
        #caught and re-raised to be clear ane explicit which exceptions 
        #this method may cause
        raise e

    features = []
    
    try: 
        features = resp.json().get('features')
    except AttributeError as e:
        raise ValueError("Unable to geocode address")

    if not len(features):
        raise ValueError("Unable to geocode address")
    
    first_feature = features[0]
    try:
        point = GEOSGeometry(json.dumps(first_feature.get("geometry", {})))
    except TypeError as e:
        raise ValueError("Unable to geocode address")
    
    return point