# Generated by Django 2.1.7 on 2019-03-15 00:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('wells', '0065_auto_20190309_0017'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivitySubmissionWaterQuality',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(default='DATALOAD_USER', max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(db_column='activity_submission_water_quality_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'activity_submission_water_quality_xref',
            },
        ),
        migrations.CreateModel(
            name='WellWaterQuality',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(default='DATALOAD_USER', max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(db_column='well_water_quality_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'well_water_quality_xref',
            },
        ),
        migrations.AlterField(
            model_name='activitysubmission',
            name='water_quality_characteristics',
            field=models.ManyToManyField(blank=True, db_table='activity_submission_water_quality', related_name='submission_water_quality_characteristics_old', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
        migrations.AlterField(
            model_name='well',
            name='water_quality_characteristics',
            field=models.ManyToManyField(blank=True, db_table='well_water_quality', related_name='well_water_quality_characteristics_old', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
        migrations.AlterModelTable(
            name='waterqualitycharacteristic',
            table='water_quality_characteristic_code',
        ),
        migrations.AddField(
            model_name='wellwaterquality',
            name='characteristic',
            field=models.ForeignKey(db_column='water_quality_characteristic_code', on_delete=django.db.models.deletion.CASCADE, to='wells.WaterQualityCharacteristic'),
        ),
        migrations.AddField(
            model_name='wellwaterquality',
            name='well',
            field=models.ForeignKey(db_column='well_tag_number', on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='activitysubmissionwaterquality',
            name='activity_submission',
            field=models.ForeignKey(db_column='filing_number', on_delete=django.db.models.deletion.CASCADE, to='wells.ActivitySubmission'),
        ),
        migrations.AddField(
            model_name='activitysubmissionwaterquality',
            name='characteristic',
            field=models.ForeignKey(db_column='water_quality_characteristic_code', on_delete=django.db.models.deletion.CASCADE, to='wells.WaterQualityCharacteristic'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='water_quality_characteristics_new',
            field=models.ManyToManyField(through='wells.ActivitySubmissionWaterQuality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
        migrations.AddField(
            model_name='well',
            name='water_quality_characteristics_new',
            field=models.ManyToManyField(through='wells.WellWaterQuality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
    ]
