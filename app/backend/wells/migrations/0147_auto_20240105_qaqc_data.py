# Generated by Django 2.2.28 on 2024-01-05 02:22

from django.db import migrations
import csv
import zipfile
import os

def import_well_data(apps, schema_editor):
    Well = apps.get_model('wells', 'Well')
    well_count = Well.objects.count()

    # Dev well count threshold
    dev_threshold = 100

    if well_count < dev_threshold:
        print("Skipping migration as it seems to be a non-production environment.")
        return
    
    wells_to_update = []

    migration_dir = os.path.dirname(__file__)
    with zipfile.ZipFile(os.path.join(migration_dir, '../fixtures/qaqc_well_data.zip'), 'r') as zip_file:
        csv_filename = zip_file.namelist()[0]
        with zip_file.open(csv_filename, 'r') as csvfile:
            reader = csv.DictReader(csvfile.read().decode('utf-8').splitlines())

            for row in reader:
                try:
                    well = Well.objects.get(well_tag_number=row['well_tag_number'])
                    try:
                        well.geocode_distance = float(row['distance_geocode']) if row['distance_geocode'] else None
                        well.distance_to_pid = float(row['distance_to_matching_pid']) if row['distance_to_matching_pid'] else None
                        well.score_address = float(row['score_address']) if row['score_address'] else None
                        well.score_city = float(row['score_city']) if row['score_city'] else None
                        well.cross_referenced = row['xref_ind'] == 'True'
                        well.natural_resource_region = row['nr_region_name'] if row['nr_region_name'] else None
                        wells_to_update.append(well)
                    except ValueError as e:
                        print(f"Error processing well {row['well_tag_number']}: {e}")
                        print(row)
                except Well.DoesNotExist:
                    print(f"Well with tag number {row['well_tag_number']} not found.")

            Well.objects.bulk_update(wells_to_update, ['geocode_distance', 'distance_to_pid', 'score_address', 'score_city', 'cross_referenced', 'natural_resource_region'])


class Migration(migrations.Migration):

    dependencies = [
        ('wells', '0146_auto_20240105_qaqc'),
    ]

    operations = [
        migrations.RunPython(import_well_data),
    ]
