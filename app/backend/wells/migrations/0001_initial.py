# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-06-29 00:24
from __future__ import unicode_literals

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gwells', '0005_auto_20180629_0024'),
        ('registries', '0011_auto_20180619_2315'),
    ]

    state_operations = [
        migrations.CreateModel(
            name='ActivitySubmission',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('filing_number', models.AutoField(primary_key=True, serialize=False)),
                ('activity_submission_guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('driller_name', models.CharField(blank=True, max_length=200, verbose_name='Name of Person Who Did the Work')),
                ('consultant_name', models.CharField(blank=True, max_length=200, verbose_name='Consultant Name')),
                ('consultant_company', models.CharField(blank=True, max_length=200, verbose_name='Consultant Company')),
                ('work_start_date', models.DateField(verbose_name='Work Start Date')),
                ('work_end_date', models.DateField(verbose_name='Work End Date')),
                ('owner_full_name', models.CharField(max_length=200, verbose_name='Owner Name')),
                ('owner_mailing_address', models.CharField(max_length=100, verbose_name='Mailing Address')),
                ('owner_city', models.CharField(max_length=100, verbose_name='Town/City')),
                ('owner_postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('street_address', models.CharField(blank=True, max_length=100, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='Town/City')),
                ('legal_lot', models.CharField(blank=True, max_length=10, verbose_name='Lot')),
                ('legal_plan', models.CharField(blank=True, max_length=20, verbose_name='Plan')),
                ('legal_district_lot', models.CharField(blank=True, max_length=20, verbose_name='District Lot')),
                ('legal_block', models.CharField(blank=True, max_length=10, verbose_name='Block')),
                ('legal_section', models.CharField(blank=True, max_length=10, verbose_name='Section')),
                ('legal_township', models.CharField(blank=True, max_length=20, verbose_name='Township')),
                ('legal_range', models.CharField(blank=True, max_length=10, verbose_name='Range')),
                ('legal_pid', models.PositiveIntegerField(blank=True, null=True, verbose_name='PID')),
                ('well_location_description', models.CharField(blank=True, max_length=500, verbose_name='Well Location Description')),
                ('identification_plate_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Identification Plate Number')),
                ('well_plate_attached', models.CharField(blank=True, max_length=500, verbose_name='Well Identification Plate Is Attached')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=8, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('ground_elevation', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ground Elevation')),
                ('other_drilling_method', models.CharField(blank=True, max_length=50, verbose_name='Specify Other Drilling Method')),
                ('well_orientation', models.BooleanField(choices=[(True, 'vertical'), (False, 'horizontal')], default=True, verbose_name='Orientation of Well')),
                ('water_supply_system_name', models.CharField(blank=True, max_length=50, verbose_name='Water Supply System Name')),
                ('water_supply_system_well_name', models.CharField(blank=True, max_length=50, verbose_name='Water Supply System Well Name')),
                ('surface_seal_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Surface Seal Depth')),
                ('surface_seal_thickness', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1.00'))], verbose_name='Surface Seal Thickness')),
                ('backfill_above_surface_seal', models.CharField(blank=True, max_length=250, verbose_name='Backfill Material Above Surface Seal')),
                ('backfill_above_surface_seal_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Backfill Depth')),
                ('liner_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Diameter')),
                ('liner_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Thickness')),
                ('liner_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner From')),
                ('liner_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Liner To')),
                ('other_screen_material', models.CharField(blank=True, max_length=50, verbose_name='Specify Other Screen Material')),
                ('other_screen_bottom', models.CharField(blank=True, max_length=50, verbose_name='Specify Other Screen Bottom')),
                ('filter_pack_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack From')),
                ('filter_pack_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Filter Pack To')),
                ('filter_pack_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack Thickness')),
                ('development_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Development Total Duration')),
                ('development_notes', models.CharField(blank=True, max_length=255, verbose_name='Development Notes')),
                ('water_quality_colour', models.CharField(blank=True, max_length=60, verbose_name='Water Quality Colour')),
                ('water_quality_odour', models.CharField(blank=True, max_length=60, verbose_name='Water Quality Odour')),
                ('total_depth_drilled', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Total Depth Drilled')),
                ('finished_well_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Finished Well Depth')),
                ('final_casing_stick_up', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, verbose_name='Final Casing Stick Up')),
                ('bedrock_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Depth to Bedrock')),
                ('static_water_level', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Static Water Level (BTOC)')),
                ('well_yield', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Estimated Well Yield')),
                ('artesian_flow', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Flow')),
                ('artesian_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Artesian Pressure')),
                ('well_cap_type', models.CharField(blank=True, max_length=40, verbose_name='Well Cap Type')),
                ('well_disinfected', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Well Disinfected?')),
                ('comments', models.CharField(blank=True, max_length=3000)),
                ('alternative_specs_submitted', models.BooleanField(default=False, verbose_name='Alternative specs submitted (if required)')),
                ('diameter', models.CharField(blank=True, max_length=9)),
            ],
            options={
                'db_table': 'activity_submission',
            },
        ),
        migrations.CreateModel(
            name='AquiferWell',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('aquifer_well_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('aquifer_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Aquifer Number')),
            ],
            options={
                'db_table': 'aquifer_well',
            },
        ),
        migrations.CreateModel(
            name='BCGS_Numbers',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('bcgs_id', models.BigIntegerField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bcgs_number', models.CharField(max_length=20, verbose_name='BCGS Mapsheet Number')),
            ],
            options={
                'db_table': 'bcgs_number',
                'ordering': ['bcgs_number'],
            },
        ),
        migrations.CreateModel(
            name='Casing',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('casing_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('casing_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='From')),
                ('casing_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='To')),
                ('diameter', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.5'))], verbose_name='Diameter')),
                ('wall_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Wall Thickness')),
                ('drive_shoe', models.NullBooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Drive Shoe')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.ActivitySubmission')),
            ],
            options={
                'db_table': 'casing',
                'ordering': ['casing_from', 'casing_to'],
            },
        ),
        migrations.CreateModel(
            name='CasingCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('casing_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'casing_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='CasingMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('casing_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'casing_material_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='DecommissionMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('decommission_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False, verbose_name='Code')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'decommission_method_code',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='DevelopmentMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('development_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'development_method_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='DrillingCompany',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('drilling_company_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('drilling_company_code', models.CharField(blank=True, max_length=10, null=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Drilling Companies',
                'db_table': 'drilling_company',
            },
        ),
        migrations.CreateModel(
            name='DrillingMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('drilling_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'drilling_method_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='FilterPackMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('filter_pack_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'filter_pack_material_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='FilterPackMaterialSizeCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('filter_pack_material_size_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'filter_pack_material_size_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='GroundElevationMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('ground_elevation_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ground_elevation_method_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='IntendedWaterUseCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('intended_water_use_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'intended_water_use_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='LandDistrictCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('land_district_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'land_district_code',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LicencedStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('licenced_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'licenced_status_code',
                'ordering': ['display_order', 'licenced_status_code'],
            },
        ),
        migrations.CreateModel(
            name='LinerMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('liner_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'liner_material_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='LinerPerforation',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('liner_perforation_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('liner_perforation_from', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Perforated From')),
                ('liner_perforation_to', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Perforated To')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.ActivitySubmission')),
            ],
            options={
                'db_table': 'liner_perforation',
            },
        ),
        migrations.CreateModel(
            name='LtsaOwner',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('lsts_owner_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200, verbose_name='Owner Name')),
                ('mailing_address', models.CharField(max_length=100, verbose_name='Mailing Address')),
                ('city', models.CharField(max_length=100, verbose_name='Town/City')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('province_state', models.ForeignKey(db_column='province_state_code', on_delete=django.db.models.deletion.CASCADE, to='gwells.ProvinceStateCode', verbose_name='Province')),
            ],
            options={
                'db_table': 'ltsa_owner',
            },
        ),
        migrations.CreateModel(
            name='ObsWellStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('obs_well_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'obs_well_status_code',
                'ordering': ['display_order', 'obs_well_status_code'],
            },
        ),
        migrations.CreateModel(
            name='Perforation',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('perforation_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('liner_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, verbose_name='Liner Thickness')),
                ('liner_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Liner Diameter')),
                ('liner_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Liner From')),
                ('liner_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Liner To')),
                ('liner_perforation_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Perforation From')),
                ('liner_perforation_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Perforation To')),
            ],
            options={
                'db_table': 'perforation',
                'ordering': ['liner_from', 'liner_to', 'liner_perforation_from', 'liner_perforation_to', 'perforation_guid'],
            },
        ),
        migrations.CreateModel(
            name='ProductionData',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('production_data_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('yield_estimation_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Estimation Rate')),
                ('yield_estimation_duration', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Estimation Duration')),
                ('static_level', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0'))], verbose_name='SWL Before Test')),
                ('drawdown', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('hydro_fracturing_performed', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Hydro-fracturing Performed?')),
                ('hydro_fracturing_yield_increase', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Well Yield Increase Due to Hydro-fracturing')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.ActivitySubmission')),
            ],
            options={
                'db_table': 'production_data',
            },
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('screen_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('screen_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='From')),
                ('screen_to', models.DecimalField(decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='To')),
                ('internal_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0'))], verbose_name='Diameter')),
                ('slot_size', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Slot Size')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.ActivitySubmission')),
                ('assembly_type', models.ForeignKey(blank=True, db_column='screen_assembly_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenAssemblyTypeCode')),
            ],
            options={
                'db_table': 'screen',
                'ordering': ['screen_from', 'screen_to'],
            },
        ),
        migrations.CreateModel(
            name='SurfaceSealMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('surface_seal_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'surface_seal_material_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='SurfaceSealMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('surface_seal_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'surface_seal_method_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='WaterQualityCharacteristic',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('water_quality_characteristic_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'water_quality_characteristic',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('well_tag_number', models.AutoField(primary_key=True, serialize=False, verbose_name='Well Tag Number')),
                ('identification_plate_number', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='Well Identification Plate Number')),
                ('owner_full_name', models.CharField(max_length=200, verbose_name='Owner Name')),
                ('owner_mailing_address', models.CharField(max_length=100, verbose_name='Mailing Address')),
                ('owner_city', models.CharField(max_length=100, verbose_name='Town/City')),
                ('owner_postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('street_address', models.CharField(blank=True, max_length=100, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='Town/City')),
                ('legal_lot', models.CharField(blank=True, max_length=10, verbose_name='Lot')),
                ('legal_plan', models.CharField(blank=True, max_length=20, verbose_name='Plan')),
                ('legal_district_lot', models.CharField(blank=True, max_length=20, verbose_name='District Lot')),
                ('legal_block', models.CharField(blank=True, max_length=10, verbose_name='Block')),
                ('legal_section', models.CharField(blank=True, max_length=10, verbose_name='Section')),
                ('legal_township', models.CharField(blank=True, max_length=20, verbose_name='Township')),
                ('legal_range', models.CharField(blank=True, max_length=10, verbose_name='Range')),
                ('legal_pid', models.CharField(blank=True, max_length=9, null=True, verbose_name='Property Identification Description (PID)')),
                ('well_location_description', models.CharField(blank=True, max_length=500, verbose_name='Description of Well Location')),
                ('construction_start_date', models.DateTimeField(null=True, verbose_name='Construction Start Date')),
                ('construction_end_date', models.DateTimeField(null=True, verbose_name='Construction Date')),
                ('alteration_start_date', models.DateTimeField(null=True, verbose_name='Alteration Start Date')),
                ('alteration_end_date', models.DateTimeField(null=True, verbose_name='Alteration Date')),
                ('decommission_start_date', models.DateTimeField(null=True, verbose_name='Decommission Start Date')),
                ('decommission_end_date', models.DateTimeField(null=True, verbose_name='Decommission Date')),
                ('well_identification_plate_attached', models.CharField(blank=True, max_length=500, null=True, verbose_name='Well Identification Plate Is Attached')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('ground_elevation', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ground Elevation')),
                ('other_drilling_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Specify Other Drilling Method')),
                ('well_orientation', models.BooleanField(choices=[(True, 'vertical'), (False, 'horizontal')], default=True, verbose_name='Orientation of Well')),
                ('surface_seal_length', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Surface Seal Length')),
                ('surface_seal_thickness', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Surface Seal Thickness')),
                ('backfill_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='Backfill Material Above Surface Seal')),
                ('backfill_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Backfill Depth')),
                ('liner_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Diameter')),
                ('liner_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Thickness')),
                ('liner_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner From')),
                ('liner_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Liner To')),
                ('other_screen_material', models.CharField(blank=True, max_length=50, verbose_name='Specify Other Screen Material')),
                ('other_screen_bottom', models.CharField(blank=True, max_length=50, verbose_name='Specify Other Screen Bottom')),
                ('filter_pack_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack From')),
                ('filter_pack_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Filter Pack To')),
                ('filter_pack_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack Thickness')),
                ('development_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Development Total Duration')),
                ('development_notes', models.CharField(blank=True, max_length=255, verbose_name='Development Notes')),
                ('water_quality_colour', models.CharField(blank=True, max_length=60, verbose_name='Water Quality Colour')),
                ('water_quality_odour', models.CharField(blank=True, max_length=60, verbose_name='Water Quality Odour')),
                ('total_depth_drilled', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Total Depth Drilled')),
                ('finished_well_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Finished Well Depth')),
                ('final_casing_stick_up', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Final Casing Stick Up')),
                ('bedrock_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Depth to Bedrock')),
                ('water_supply_system_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Name')),
                ('water_supply_system_well_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Well Name')),
                ('static_water_level', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Static Water Level (BTOC)')),
                ('well_yield', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Estimated Well Yield')),
                ('artesian_flow', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Flow')),
                ('artesian_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Pressure')),
                ('well_cap_type', models.CharField(blank=True, max_length=40, null=True, verbose_name='Well Cap')),
                ('well_disinfected', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Well Disinfected')),
                ('comments', models.CharField(blank=True, max_length=3000, null=True)),
                ('alternative_specs_submitted', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Alternative specs submitted (if required)')),
                ('diameter', models.CharField(blank=True, max_length=9)),
                ('observation_well_number', models.CharField(blank=True, max_length=3, null=True, verbose_name='Observation Well Number')),
                ('ems', models.CharField(blank=True, max_length=10, null=True, verbose_name='Environmental Monitoring System (EMS) ID')),
                ('utm_zone_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Zone')),
                ('utm_northing', models.IntegerField(blank=True, null=True, verbose_name='UTM Northing')),
                ('utm_easting', models.IntegerField(blank=True, null=True, verbose_name='UTM Easting')),
                ('utm_accuracy_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Location Accuracy Code')),
                ('decommission_reason', models.CharField(blank=True, max_length=250, null=True, verbose_name='Reason for Decommission')),
                ('sealant_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sealant Material')),
                ('backfill_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Backfill Material')),
                ('decommission_details', models.CharField(blank=True, max_length=250, null=True, verbose_name='Decommission Details')),
                ('bcgs_id', models.ForeignKey(blank=True, db_column='bcgs_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.BCGS_Numbers', verbose_name='BCGS Mapsheet Number')),
                ('decommission_method', models.ForeignKey(blank=True, db_column='decommission_method_code', null='True', on_delete=django.db.models.deletion.CASCADE, to='wells.DecommissionMethodCode', verbose_name='Method of Decommission')),
                ('development_method', models.ForeignKey(blank=True, db_column='development_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DevelopmentMethodCode', verbose_name='Developed By')),
                ('drilling_company', models.ForeignKey(blank=True, db_column='drilling_company_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DrillingCompany', verbose_name='Drilling Company')),
                ('drilling_method', models.ForeignKey(blank=True, db_column='drilling_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DrillingMethodCode', verbose_name='Drilling Method')),
                ('filter_pack_material', models.ForeignKey(blank=True, db_column='filter_pack_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialCode', verbose_name='Filter Pack Material')),
                ('filter_pack_material_size', models.ForeignKey(blank=True, db_column='filter_pack_material_size_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialSizeCode', verbose_name='Filter Pack Material Size')),
                ('ground_elevation_method', models.ForeignKey(blank=True, db_column='ground_elevation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.GroundElevationMethodCode', verbose_name='Elevation Determined By')),
                ('intended_water_use', models.ForeignKey(blank=True, db_column='intended_water_use_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.IntendedWaterUseCode', verbose_name='Intended Water Use')),
                ('land_district', models.ForeignKey(blank=True, db_column='land_district_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LandDistrictCode', verbose_name='Land District')),
                ('licenced_status', models.ForeignKey(blank=True, db_column='licenced_status_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LicencedStatusCode', verbose_name='Licenced Status')),
                ('liner_material', models.ForeignKey(blank=True, db_column='liner_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LinerMaterialCode', verbose_name='Liner Material')),
                ('observation_well_status', models.ForeignKey(blank=True, db_column='obs_well_status_code', null='True', on_delete=django.db.models.deletion.CASCADE, to='wells.ObsWellStatusCode', verbose_name='Observation Well Status')),
                ('owner_province_state', models.ForeignKey(blank=True, db_column='province_state_code', on_delete=django.db.models.deletion.CASCADE, to='gwells.ProvinceStateCode', verbose_name='Province')),
                ('screen_bottom', models.ForeignKey(blank=True, db_column='screen_bottom_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenBottomCode', verbose_name='Bottom')),
                ('screen_intake_method', models.ForeignKey(blank=True, db_column='screen_intake_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenIntakeMethodCode', verbose_name='Intake Method')),
                ('screen_material', models.ForeignKey(blank=True, db_column='screen_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenMaterialCode', verbose_name='Material')),
                ('screen_opening', models.ForeignKey(blank=True, db_column='screen_opening_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenOpeningCode', verbose_name='Opening')),
                ('screen_type', models.ForeignKey(blank=True, db_column='screen_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenTypeCode', verbose_name='Type')),
                ('surface_seal_material', models.ForeignKey(blank=True, db_column='surface_seal_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMaterialCode', verbose_name='Surface Seal Material')),
                ('surface_seal_method', models.ForeignKey(blank=True, db_column='surface_seal_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMethodCode', verbose_name='Surface Seal Installation Method')),
                ('water_quality_characteristics', models.ManyToManyField(blank=True, db_table='well_water_quality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics')),
            ],
            options={
                'db_table': 'well',
            },
        ),
        migrations.CreateModel(
            name='WellActivityCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_activity_type_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'well_activity_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='WellClassCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_class_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'well_class_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='WellStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'well_status_code',
                'ordering': ['display_order', 'well_status_code'],
            },
        ),
        migrations.CreateModel(
            name='WellSubclassCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_subclass_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('well_subclass_code', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('well_class', models.ForeignKey(blank=True, db_column='well_class_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.WellClassCode')),
            ],
            options={
                'db_table': 'well_subclass_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='WellYieldUnitCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('well_yield_unit_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'well_yield_unit_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.CreateModel(
            name='YieldEstimationMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('update_user', models.CharField(max_length=60, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('yield_estimation_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'yield_estimation_method_code',
                'ordering': ['display_order', 'description'],
            },
        ),
        migrations.AddField(
            model_name='well',
            name='well_class',
            field=models.ForeignKey(db_column='well_class_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellClassCode', verbose_name='Well Class'),
        ),
        migrations.AddField(
            model_name='well',
            name='well_status',
            field=models.ForeignKey(blank=True, db_column='well_status_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellStatusCode', verbose_name='Well Status'),
        ),
        migrations.AddField(
            model_name='well',
            name='well_subclass',
            field=models.ForeignKey(blank=True, db_column='well_subclass_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellSubclassCode', verbose_name='Well Subclass'),
        ),
        migrations.AddField(
            model_name='well',
            name='well_yield_unit',
            field=models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode'),
        ),
        migrations.AddField(
            model_name='screen',
            name='well',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='productiondata',
            name='well',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='productiondata',
            name='well_yield_unit',
            field=models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode'),
        ),
        migrations.AddField(
            model_name='productiondata',
            name='yield_estimation_method',
            field=models.ForeignKey(blank=True, db_column='yield_estimation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.YieldEstimationMethodCode', verbose_name='Estimation Method'),
        ),
        migrations.AddField(
            model_name='perforation',
            name='well_tag_number',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='ltsaowner',
            name='well',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='linerperforation',
            name='well',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='casing',
            name='casing_code',
            field=models.ForeignKey(db_column='casing_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.CasingCode', verbose_name='Casing Code'),
        ),
        migrations.AddField(
            model_name='casing',
            name='casing_material',
            field=models.ForeignKey(blank=True, db_column='casing_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.CasingMaterialCode', verbose_name='Casing Material Code'),
        ),
        migrations.AddField(
            model_name='casing',
            name='well_tag_number',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='aquiferwell',
            name='well_tag_number',
            field=models.ForeignKey(db_column='well_tag_number', on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='development_method',
            field=models.ForeignKey(blank=True, db_column='development_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DevelopmentMethodCode', verbose_name='Development Method'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='driller_responsible',
            field=models.ForeignKey(db_column='driller_responsible_guid', on_delete=django.db.models.deletion.PROTECT, to='registries.Person', verbose_name='Person Responsible for Drilling'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='drilling_method',
            field=models.ForeignKey(blank=True, db_column='drilling_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DrillingMethodCode', verbose_name='Drilling Method'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='filter_pack_material',
            field=models.ForeignKey(blank=True, db_column='filter_pack_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialCode', verbose_name='Filter Pack Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='filter_pack_material_size',
            field=models.ForeignKey(blank=True, db_column='filter_pack_material_size_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialSizeCode', verbose_name='Filter Pack Material Size'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='ground_elevation_method',
            field=models.ForeignKey(blank=True, db_column='ground_elevation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.GroundElevationMethodCode', verbose_name='Elevation Determined By'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='intended_water_use',
            field=models.ForeignKey(blank=True, db_column='intended_water_use_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.IntendedWaterUseCode', verbose_name='Intended Water Use'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='land_district',
            field=models.ForeignKey(blank=True, db_column='land_district_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LandDistrictCode', verbose_name='Land District'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='liner_material',
            field=models.ForeignKey(blank=True, db_column='liner_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LinerMaterialCode', verbose_name='Liner Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='owner_province_state',
            field=models.ForeignKey(db_column='province_state_code', on_delete=django.db.models.deletion.CASCADE, to='gwells.ProvinceStateCode', verbose_name='Province'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_bottom',
            field=models.ForeignKey(blank=True, db_column='screen_bottom_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenBottomCode', verbose_name='Bottom'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_intake_method',
            field=models.ForeignKey(blank=True, db_column='screen_intake_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenIntakeMethodCode', verbose_name='Intake'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_material',
            field=models.ForeignKey(blank=True, db_column='screen_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenMaterialCode', verbose_name='Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_opening',
            field=models.ForeignKey(blank=True, db_column='screen_opening_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenOpeningCode', verbose_name='Opening'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_type',
            field=models.ForeignKey(blank=True, db_column='screen_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenTypeCode', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='surface_seal_material',
            field=models.ForeignKey(blank=True, db_column='surface_seal_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMaterialCode', verbose_name='Surface Seal Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='surface_seal_method',
            field=models.ForeignKey(blank=True, db_column='surface_seal_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMethodCode', verbose_name='Surface Seal Installation Method'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='water_quality_characteristics',
            field=models.ManyToManyField(blank=True, db_table='activity_submission_water_quality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_activity_type',
            field=models.ForeignKey(db_column='well_activity_code', on_delete=django.db.models.deletion.CASCADE, to='wells.WellActivityCode', verbose_name='Type of Work'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_class',
            field=models.ForeignKey(db_column='well_class_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellClassCode', verbose_name='Well Class'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_subclass',
            field=models.ForeignKey(blank=True, db_column='well_subclass_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellSubclassCode', verbose_name='Well Subclass'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_tag_number',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_yield_unit',
            field=models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode'),
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(state_operations=state_operations)
    ]
