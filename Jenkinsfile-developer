node('maven') {
    stage('Build') {
        echo "Building..."
        openshiftBuild bldCfg: 'gwells-developer', showBuildLogs: 'true'
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: '$BUILD_ID', srcStream: 'gwells', srcTag: 'latest'
    }

//    stage('Unit Test') {
//        node('python') {
//            checkout scm
//            try {
//                sh 'pip install --upgrade pip && pip install -r requirements.txt'
//		sh 'cd frontend && npm install && npm run build && cd ..'
//		sh 'python manage.py collectstatic && python manage.py migrate'
//                sh 'export ENABLE_DATA_ENTRY="True" && python manage.py test -c nose.cfg'
//            } 
//            finally {
//                stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
//                junit 'nosetests.xml'
//            }
//        }
//    }    

    stage('Code Quality Check') {
	    //the checkout is mandatory, otherwise code quality check would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_URL: ${SONARQUBE_URL}"

        dir('sonar-runner') {
  //          unstash 'coverage'
            try {
                sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info  -Dsonar.sources=.."
            } finally { }
        }
    }    

    stage('Deploy on Dev') {
        echo "Deploying to dev..."
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'dev', srcStream: 'gwells', srcTag: '$BUILD_ID'
        sleep 5
        openshiftVerifyDeployment depCfg: 'gwells', namespace: 'moe-gwells-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false', waitTime: 600000
	    echo ">>>> Deployment Complete"
    }
}

stage('API Test') {
    node('nodejs') {
	//the checkout is mandatory, otherwise functional test would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('api-tests') {
	    sh 'npm install -g newman'
	    try {
		sh 'newman run registries_api_tests.json --global-var base_url="https://gwells-dev.pathfinder.gov.bc.ca/gwells/registries" --global-var test_user=$GWELLS_API_TEST_USER --global-var test_password=$GWELLS_API_TEST_PASSWORD -r cli,junit,html;'
	    } finally {
                junit 'newman/*.xml'
                publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'newman',
                            reportFiles: 'newman*.html',
                            reportName: "API Test Report"
                        ])
                stash includes: 'newman/*.xml', name: 'api-tests' 
            }
        }
    }
}

stage('FT on Dev') {
	node('bddstack') {
		//the checkout is mandatory, otherwise functional test would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('functional-tests/build/test-results') {
    //        unstash 'coverage'
    //        sh 'rm coverage.xml'
	    unstash 'api-tests'
        }
        dir('functional-tests') {
            try {
                    sh './gradlew chromeHeadlessTest'
            } finally {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/geb/**/*'
                    junit 'build/test-results/**/*.xml'
                    publishHTML (target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'build/reports/spock',
                                reportFiles: 'index.html',
                                reportName: "BDD Spock Report"
                            ])
                    publishHTML (target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'build/reports/tests/chromeHeadlessTest',
                                reportFiles: 'index.html',
                                reportName: "Full Test Report"
                            ])
	            perfReport compareBuildPrevious: true, excludeResponseTime: true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, modeEvaluation: true, modePerformancePerTestCase: true, percentiles: '0,50,90,100', relativeFailedThresholdNegative: 80.0, relativeFailedThresholdPositive: 20.0, relativeUnstableThresholdNegative: 50.0, relativeUnstableThresholdPositive: 50.0, sourceDataFiles: 'build/test-results/**/*.xml'
            }
        }
    }
}

stage('ZAP Security Scan') {
    node('zap') {
        //the checkout is mandatory
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('zap') {
            def retVal = sh returnStatus: true, script: './runzap.sh'
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
            echo "Return value is: ${retVal}"
            }
    }
}

stage('Deploy on Test') {
    input "Deploy to test?"
    node('maven') {
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'test', srcStream: 'gwells', srcTag: '$BUILD_ID'
        sleep 5
        // openshiftVerifyDeployment depCfg: 'gwells', namespace: 'moe-gwells-test', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
	    echo ">>>> Test Deployment Complete"
    }
}
