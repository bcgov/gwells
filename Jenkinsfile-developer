
node('maven') {
    stage('Build') {
        echo "Building..."
        openshiftBuild bldCfg: 'gwells-developer', showBuildLogs: 'true'
        echo ">>> Get Image Hash"
        IMAGE_HASH = sh (
          script: 'oc get istag gwells:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	           returnStdout: true).trim()
        echo ">> IMAGE_HASH: $IMAGE_HASH"
        // Temporarily removed this next line as it's to be done in the Deployments...
        // openshiftTag destStream: 'gwells', verbose: 'true', destTag: '$BUILD_ID', srcStream: 'gwells', srcTag: 'latest'
    }

    stage('Code Quality Check') {
	//the checkout is mandatory, otherwise code quality check would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_URL: ${SONARQUBE_URL}"

        dir('sonar-runner') {
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info  -Dsonar.sources=.."
        }
    }

    stage('Deploy on Dev') {
        echo "Deploying to dev..."

	// GW - following is to prepare for move to IMAGE_HASH 
	echo "Deploy on Dev >> IMAGE_HASH: $IMAGE_HASH"
	openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'devblue', srcStream: 'gwells', srcTag: 'dev'
	openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'dev', srcStream: 'gwells', srcTag: "${IMAGE_HASH}"
	
	// GW Will remove this next line once prior 3 lines have been tested
        // openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'dev', srcStream: 'gwells', srcTag: '$BUILD_ID'

	openshiftVerifyDeployment depCfg: 'gwells', namespace: 'moe-gwells-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'		
    }

}

node('bddstack') {

	stage('FT on Dev') {
		//the checkout is mandatory, otherwise functional test would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('functional-tests') {
	    try {
                sh './gradlew --debug --stacktrace chromeHeadlessTest'
	    } finally {
		archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**/*'
                junit 'build/test-results/**/*.xml'
	    }
        }
    }
}

stage('Deploy on Test') {
    input "Deploy to test?"
    node('maven') {
	// GW - following is to prepare for move to IMAGE_HASH 
	echo "Deploy on Test >> IMAGE_HASH: $IMAGE_HASH"
	openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'testblue', srcStream: 'gwells', srcTag: 'test'
	openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'test', srcStream: 'gwells', srcTag: "${IMAGE_HASH}"	
	// GW Will remove this next line once prior 3 lines have been tested
        // openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'test', srcStream: 'gwells', srcTag: '$BUILD_ID'
	
	openshiftVerifyDeployment depCfg: 'gwells', namespace: 'moe-gwells-test', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'			
    }
}


node('bddstack') {
      stage('FT on Test (TBD)') {
          sh 'sleep 5s'
      }
}
