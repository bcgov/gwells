node('maven') {
    stage('Build') {
        echo "Building..."
        openshiftBuild bldCfg: 'gwells-developer', showBuildLogs: 'true'
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: '$BUILD_ID', srcStream: 'gwells', srcTag: 'latest'
    }

    node('python') {
        stage('Unit Test') {
            checkout scm
            try {
                sh 'pip install --upgrade pip && pip install -r requirements.txt'
                sh 'python manage.py collectstatic && python manage.py migrate'
                sh 'python manage.py test -c nose.cfg'
            } 
            finally {
                stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                junit 'nosetests.xml'
            }
        }
    }    

    stage('Code Quality Check') {
	//the checkout is mandatory, otherwise code quality check would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo "SONARQUBE_URL: ${SONARQUBE_URL}"

        dir('sonar-runner') {
            unstash 'coverage'
            try {
                sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info  -Dsonar.sources=.."
            } finally { }
        }
    }    

    stage('Deploy on Dev') {
        echo "Deploying to dev..."
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'dev', srcStream: 'gwells', srcTag: '$BUILD_ID'
	//Sleeping for a while to wait deployment completes
	sh 'sleep 3m'
    }
}

node('bddstack') {

	stage('FT on Dev') {
		//the checkout is mandatory, otherwise functional test would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('functional-tests') {
	    try {
                sh './gradlew --debug --stacktrace chromeHeadlessTest'
	    } finally {
		        archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**/*'
                junit 'build/test-results/**/*.xml'
                publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/spock',
                            reportFiles: 'index.html',
                            reportName: "BDD Spock Report"
                        ])
                publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/chromeHeadlessTest',
                            reportFiles: 'index.html',
                            reportName: "Full Test Report"
                        ])        
	    }
        }
    }
}

stage('ZAP Security Scan') {
    node('zap') {
        stage('Scan Web Application') {
            //the checkout is mandatory, otherwise functional test would fail
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm
            dir('zap') {
                def retVal = sh returnStatus: true, script: './runzapdev.sh'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
                echo "Return value is: ${retVal}"
                }
        }
    }
}


stage('Deploy on Test') {
    input "Deploy to test?"
    node('maven') {
        openshiftTag destStream: 'gwells', verbose: 'true', destTag: 'test', srcStream: 'gwells', srcTag: '$BUILD_ID'
	sh 'sleep 3m'
    }
}


node('bddstack') {
      stage('FT on Test (TBD)') {
          sh 'sleep 5s'
      }
}
