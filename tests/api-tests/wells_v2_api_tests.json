{
	"info": {
		"_postman_id": "126dede9-3fce-4f58-a51d-9b26f285cf06",
		"name": "GWELLS Well API v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33152761"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
									"})",
									"",
									"pm.test(\"A token was returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
									"    pm.expect(jsonData.access_token.length).to.be.above(36);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_server}}",
							"host": [
								"{{auth_server}}"
							]
						},
						"description": "Get token (log in)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Wells",
			"item": [
				{
					"name": "Well list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Response schema matches\", () => {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"count\": {\"type\": \"number\"},",
									"            \"next\": {\"type\": [\"string\", \"null\"]},",
									"            \"previous\": {\"type\": [\"string\", \"null\"]},",
									"            \"offset\": {\"type\": \"number\"},",
									"            \"results\": {\"type\": \"array\"}",
									"        }",
									"    }",
									"    pm.expect(pm.response.json()).to.be.jsonSchema(schema)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Create Well",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"well_tag_number\", jsonData.well);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"const postRequest = {",
									"    \"driller_name\": \"Jimithy\",",
									"\t\"consultant_name\": \"Bobothy\",",
									"\t\"consultant_company\": \"Inc & Inc\",",
									"\t\"work_end_date\": \"2018-07-10\",",
									"\t\"owner_full_name\": \"Holly Homeowner\",",
									"\t\"work_start_date\": \"2018-07-01\",",
									"\t\"owner_province_state\": \"BC\",",
									"\t\"owner_mailing_address\": \"321 Main Street\",",
									"\t\"owner_city\": \"Anytown\",",
									"}",
									"",
									"pm.test(\"Values in post request reflected in new well\", () => {",
									"    for(const key of Object.keys(postRequest)) {",
									"        pm.expect(jsonData[key]).to.equal(postRequest[key])",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"driller_name\": \"Jimithy\",\n\t\"consultant_name\": \"Bobothy\",\n\t\"consultant_company\": \"Inc & Inc\",\n\t\"work_end_date\": \"2018-07-10\",\n\t\"owner_full_name\": \"Holly Homeowner\",\n\t\"work_start_date\": \"2018-07-01\",\n\t\"owner_province_state\": \"BC\",\n\t\"owner_mailing_address\": \"321 Main Street\",\n\t\"owner_city\": \"Anytown\",\n\t\"latitude\": 50,\n\t\"longitude\": 123\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"construction"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Submit a submission"
					},
					"response": []
				},
				{
					"name": "Well Single Instance Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Wells Get PUT_URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Response contains URL with signature\", function() {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.url).to.not.eql(null)",
									"    pm.expect(jsonData.url).to.include(\"X-Amz-Signature\")",
									"    pm.expect(jsonData.url).to.include(\"file%20with%20space.pdf\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/presigned_put_url?filename=file with space.pdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"presigned_put_url"
							],
							"query": [
								{
									"key": "filename",
									"value": "file with space.pdf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Well's Vertical Aquifer Extents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Response contains an empty array\", function() {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData).to.be.an('array')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/vertical-aquifer-extents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"vertical-aquifer-extents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Aquifer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test(\"Aquifer id exists in response\", () => {",
									"    pm.expect(jsonData.aquifer_id).to.be.a('number');",
									"})",
									"",
									"pm.environment.set(\"aquifer_id\", jsonData.aquifer_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name \",\n\t\"area\":\"10\",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1991\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": [\n\t\t{ \"name\": \"resource 1\", \"url\": \"http://www.example.com/\", \"section_code\": \"M\" }\n\t]\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/aquifers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Well's Vertical Aquifer Extents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var aquifer_id = pm.environment.get('aquifer_id')\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"   pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"\r",
									"pm.test(\"One vertical aquifer extents returned\", function () {\r",
									"   pm.expect(jsonData.length).to.equal(1);\r",
									"})\r",
									"\r",
									"pm.test(\"Well's vertical aquifer extent aquifer_id equals name supplied in request\", function () {\r",
									"    pm.expect(jsonData[0].aquifer_id).to.eql(aquifer_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Well's vertical aquifer extent start equals name supplied in request\", function () {\r",
									"    pm.expect(jsonData[0].start).to.eql('1.00');\r",
									"});\r",
									"\r",
									"pm.test(\"Well's vertical aquifer extent end equals name supplied in request\", function () {\r",
									"    pm.expect(jsonData[0].end).to.eql('100.00');\r",
									"});\r",
									"\r",
									"pm.test(\"Well's vertical aquifer extent latitude equals name supplied in request\", function () {\r",
									"    pm.expect(jsonData[0].lat).to.eql(50.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Well's vertical aquifer extent longitude equals name supplied in request\", function () {\r",
									"    pm.expect(jsonData[0].lng).to.eql(-120.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"aquifer_id\": {{aquifer_id}},\n    \"start\": \"1\",\n    \"end\": \"100.00\",\n    \"lat\": \"50\",\n    \"lng\": \"-120\"\n  }\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/vertical-aquifer-extents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"vertical-aquifer-extents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create another Aquifer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test(\"Aquifer id exists in response\", () => {",
									"    pm.expect(jsonData.aquifer_id).to.be.a('number');",
									"})",
									"",
									"pm.environment.set(\"aquifer2_id\", jsonData.aquifer_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name 2\",\n\t\"area\":\"10\",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1992\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": [\n\t\t{ \"name\": \"resource 1\", \"url\": \"http://www.example.com/\", \"section_code\": \"M\" }\n\t]\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/aquifers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Addition to Well's Extents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.expect(pm.response.code).to.equal(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"aquiferId\": {{aquifer2_id}},\n    \"fromDepth\": 200,\n    \"toDepth\": 300.00,\n    \"wellTagNumber\": {{well_tag_number}}\n  }\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/bulk/vertical-aquifer-extents?commit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"bulk",
								"vertical-aquifer-extents"
							],
							"query": [
								{
									"key": "commit",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Well with Two Extents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"var aquifer_id = pm.environment.get('aquifer_id')",
									"var aquifer2_id = pm.environment.get('aquifer2_id')",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Two vertical aquifer extents returned\", function () {",
									"   pm.expect(jsonData.length).to.equal(2);",
									"})",
									"",
									"pm.test(\"Well's first vertical aquifer extent aquifer_id equals name supplied in request\", function () {",
									"    pm.expect(jsonData[0].aquifer_id).to.eql(aquifer_id);",
									"});",
									"",
									"pm.test(\"Well's first vertical aquifer extent start equals name supplied in request\", function () {",
									"    pm.expect(jsonData[0].start).to.eql('1.00');",
									"});",
									"",
									"pm.test(\"Well's first vertical aquifer extent end equals name supplied in request\", function () {",
									"    pm.expect(jsonData[0].end).to.eql('100.00');",
									"});",
									"",
									"pm.test(\"Well's first vertical aquifer extent latitude equals name supplied in request\", function () {",
									"    pm.expect(jsonData[0].lat).to.eql(50.0);",
									"});",
									"",
									"pm.test(\"Well's first vertical aquifer extent longitude equals name supplied in request\", function () {",
									"    pm.expect(jsonData[0].lng).to.eql(-120.0);",
									"});",
									"",
									"pm.test(\"Well's second vertical aquifer extent aquifer_id equals name supplied in request\", function () {",
									"    pm.expect(jsonData[1].aquifer_id).to.eql(aquifer2_id);",
									"});",
									"",
									"pm.test(\"Well's second vertical aquifer extent start equals name supplied in request\", function () {",
									"    pm.expect(jsonData[1].start).to.eql('200.00');",
									"});",
									"",
									"pm.test(\"Well's second vertical aquifer extent end equals name supplied in request\", function () {",
									"    pm.expect(jsonData[1].end).to.eql('300.00');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/vertical-aquifer-extents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"vertical-aquifer-extents"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
