{
	"info": {
		"_postman_id": "5af206dc-0c56-4a30-b354-9ba715416251",
		"name": "GWELLS Submissions API v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33152761"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
									"})",
									"",
									"pm.test(\"A token was returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
									"    pm.expect(jsonData.access_token.length).to.be.above(36);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_server}}",
							"host": [
								"{{auth_server}}"
							]
						},
						"description": "Get token (log in)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Wells",
			"item": []
		},
		{
			"name": "Activity Submissions",
			"item": [
				{
					"name": "General",
					"item": [
						{
							"name": "Submission form Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test(\"Validate response keys hold arrays\", () => {",
											"    _.each(jsonData, (items) => {",
											"        pm.expect(items).to.be.an('array')",
											"        pm.expect(items.length > 0)",
											"    });",
											"    pm.expect(Object.keys(jsonData).length >= 44); // 44 entries existed at time of writing this test",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/options?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"options"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Get form submission options"
							},
							"response": []
						},
						{
							"name": "Submission list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Response schema matches\", () => {",
											"    const schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"count\": {\"type\": \"number\"},",
											"            \"next\": {\"type\": [\"string\", \"null\"]},",
											"            \"previous\": {\"type\": [\"string\", \"null\"]},",
											"            \"offset\": {\"type\": \"number\"},",
											"            \"results\": {\"type\": \"array\"}",
											"        }",
											"    }",
											"    pm.expect(pm.response.json()).to.be.jsonSchema(schema)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/submissions?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Create new driller for submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_driller_guid\", jsonData.person_guid);",
											"    pm.environment.set(\"driller_audit_name\", jsonData.create_user);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.person_guid);",
											"        pm.expect(match).to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.person_guid);",
											"    });",
											"    ",
											"    pm.test(\"Person first name equals name supplied in request\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Driller\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (create_user, create_date) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "Bobby",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Driller",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v2/drillers?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"drillers"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller to be registered"
							},
							"response": []
						}
					]
				},
				{
					"name": "Construction",
					"item": [
						{
							"name": "Construction Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											"var created_driller_guid = pm.environment.get('created_driller_guid')",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect well record to be created\", function() {",
											"    pm.expect(jsonData.well).to.be.ok;",
											"})",
											"",
											"pm.test(\"Expect driller_responsible to be returned\", function() {",
											"    pm.expect(jsonData.consultant_company).to.equal(\"Inc & Inc\")",
											"})",
											"",
											"pm.test(\"Expect consultant_name to be returned\", function() {",
											"    pm.expect(jsonData.consultant_name).to.equal(\"Bobothy\")",
											"})",
											"",
											"pm.test(\"Expect driller_name to be returned\", function() {",
											"    pm.expect(jsonData.driller_name).to.equal(\"Jimithy\")",
											"})",
											"",
											"pm.test(\"Expect driller_responsible to be returned\", function() {",
											"    pm.expect(jsonData.person_responsible).to.equal(created_driller_guid)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"person_responsible\": \"{{created_driller_guid}}\",\n\t\"driller_name\": \"Jimithy\",\n\t\"consultant_name\": \"Bobothy\",\n\t\"consultant_company\": \"Inc & Inc\",\n\t\"work_end_date\": \"2018-07-10\",\n\t\"owner_full_name\": \"Holly Homeowner\",\n\t\"work_start_date\": \"2018-07-01\",\n\t\"owner_province_state\": \"BC\",\n\t\"owner_mailing_address\": \"321 Main Street\",\n\t\"owner_city\": \"Anytown\",\n\t\"well_orientation_status\": \"VERTICAL\",\n\t\"drilling_method\": [\"AUGER\", \"CABLE_TOOL\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Check submission - created well",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var created_driller_guid = pm.environment.get('created_driller_guid')",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect casing list to be empty\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect screen list empty\", function() {",
											"    pm.expect(jsonData.screen_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect well orientation status to be VERTICAL\", function() {",
											"    pm.expect(jsonData.well_orientation_status).to.equal('VERTICAL');",
											"})",
											"",
											"pm.test(\"Expect linerperforation to be empty\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"person_responsible is an object with name and guid\", function() {",
											"    pm.expect('name' in jsonData['person_responsible']).to.be.true",
											"})",
											"",
											"pm.test(\"person_responsible is an object with name and guid\", function() {",
											"    pm.expect('person_guid' in jsonData['person_responsible']).to.be.true",
											"    pm.expect(jsonData.person_responsible.person_guid).to.equal(created_driller_guid)",
											"})",
											"",
											"pm.test(\"We expect the default accuracy code to be 'H' (GPS)\", function() {",
											"    pm.expect(jsonData.coordinate_acquisition_code).to.equal('H')",
											"})",
											"",
											"pm.test(\"Well class is set to UNK\", function() {",
											"    pm.expect(jsonData.well_class).to.equal(\"UNK\")",
											"})",
											"",
											"pm.test(\"Intended water use code is set to NA\", function() {",
											"    pm.expect(jsonData.intended_water_use).to.equal(\"NA\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Check submission - created construction submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect casing list to be empty\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect screen list empty\", function() {",
											"    pm.expect(jsonData.screen_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect linerperforation to be empty\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/{{filing_number}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"{{filing_number}}"
									]
								},
								"description": "Check if the submission was created correctly."
							},
							"response": []
						},
						{
							"name": "Construction Submission - casings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect casings records to be created\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(2);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"1\",\n\t\t\t\"end\":\"1\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t},\n\t\t{\n\t\t\t\"casing_code\":\"SURFACE\",\n\t\t\t\"start\":\"2\",\n\t\t\t\"casing_material\":\"STEEL\",\n\t\t\t\"end\":\"2\",\n\t\t\t\"diameter\":\"2\",\n\t\t\t\"drive_shoe\":\"True\",\n\t\t\t\"id\":1,\n\t\t\t\"wall_thickness\":\"7\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Construction Submission - casings - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"   pm.expect(pm.response.code).to.equal(400);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"casing_set\": [\n\t\t{\n\t\t},\n\t\t{\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - created well casings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect casing list to contain two entries\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(2);",
											"})",
											"",
											"pm.test(\"Expect screen list empty\", function() {",
											"    pm.expect(jsonData.screen_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect linerperforation to be empty\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Construction Submission - screen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"screen_set\": [\n\t\t{\n\t\t\t\"start\": 10,\n\t\t\t\"end\": 20,\n\t\t\t\"assembly_type\": \"SCREEN\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Construction Submission - screen empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"screen_set\": [\n\t\t{\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - created well screens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect casing list to contain two entries\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect screen list empty\", function() {",
											"    pm.expect(jsonData.screen_set.length).to.equal(1);",
											"})",
											"",
											"pm.test(\"Expect linerperforation to be empty\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Construction Submission - liner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 10\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Construction Submission - liner empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"   pm.expect(pm.response.code).to.equal(400);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"linerperforation_set\": [\n\t\t{}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - created well liners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect casing list to contain two entries\", function() {",
											"    pm.expect(jsonData.casing_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect screen list empty\", function() {",
											"    pm.expect(jsonData.screen_set.length).to.equal(0);",
											"})",
											"",
											"pm.test(\"Expect linerperforation to still have one value\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Construction Submission - production data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"drawdown\": 10,\n\t\"yield_estimation_rate\": 10\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - production data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect production data - yield estimation rate to be created\", function() {",
											"    pm.expect(jsonData.yield_estimation_rate).to.equal(\"10.00\")",
											"})",
											"",
											"pm.test(\"Expect production data - drawdown to be created\", function() {",
											"    pm.expect(jsonData.drawdown).to.equal(\"10.00\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Construction Submission - lithology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"lithologydescription_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 10,\n\t\t\t\"lithology_raw_data\": \"SAND, silty, some gravel\",\n\t\t\t\"lithology_hardness\": \"DENSE\",\n\t\t\t\"lithology_colour\": 13,\n\t\t\t\"lithology_moisture\": \"WET\",\n\t\t\t\"water_bearing_estimated_flow\": 2.1,\n\t\t\t\"lithology_observation\": \"hard to drill through\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Construction Submission - lithology empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"lithologydescription_set\": []\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - created lithology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"",
											"pm.test(\"Expect lithology to have one value\", function() {",
											"    pm.expect(jsonData.lithologydescription_set.length).to.equal(1);",
											"})",
											"pm.test(\"Lithology entry: expect start to be 0.00\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].start).to.equal('0.00');",
											"})",
											"pm.test(\"Lithology entry: expect end to be 10.00\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].end).to.equal('10.00');",
											"})",
											"",
											"pm.test(\"Lithology entry: expect lithology_raw_data to be equal to first submission\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].lithology_raw_data).to.equal('SAND, silty, some gravel');",
											"})",
											"pm.test(\"Lithology entry: expect color to be a vibrant shade of 13\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].lithology_colour).to.equal('13');",
											"})",
											"pm.test(\"Lithology entry: expect hardness to be dense\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].lithology_hardness).to.equal('DENSE');",
											"})",
											"pm.test(\"Lithology entry: expect moisture to be wet\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].lithology_moisture).to.equal('WET');",
											"})",
											"pm.test(\"Lithology entry: expect water bearing flow to be 2.1\", function() {",
											"    pm.expect(jsonData.lithologydescription_set[0].water_bearing_estimated_flow).to.equal('2.1000');",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Driller delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v2/drillers/{{created_driller_guid}}?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"drillers",
										"{{created_driller_guid}}"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete driller specified by GUID."
							},
							"response": []
						}
					]
				},
				{
					"name": "Alteration",
					"item": [
						{
							"name": "Alteration for unknown well",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"ALT\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"ALT_WELL_TEST_CITY\",\n\t\"owner_province_state\": \"BC\",\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"10\",\n\t\t\t\"end\":\"20\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t}\n\t],\n    \"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 10,\n\t\t\t\"end\": 20\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/alteration?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"alteration"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check submission - well created - Alteration report on unknown well",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expected well owner city to match the submitted alteration report\", function() {",
											"    pm.expect(jsonData.owner_city).to.equal(\"ALT_WELL_TEST_CITY\");",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Check submission - created alteration submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expected well owner city to match the submitted alteration report\", function() {",
											"    pm.expect(jsonData.owner_city).to.equal(\"ALT_WELL_TEST_CITY\");",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/{{filing_number}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"{{filing_number}}"
									]
								},
								"description": "Check if the submission was created correclty."
							},
							"response": []
						},
						{
							"name": "Create new driller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_driller_guid\", jsonData.person_guid);",
											"})();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "Bobby",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Driller",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v2/drillers?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"drillers"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller to be registered"
							},
							"response": []
						},
						{
							"name": "Create new company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 201\").to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"company_guid\", jsonData.org_guid);",
											"})();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Steve's Drilling Inc.",
											"type": "text"
										},
										{
											"key": "street_address",
											"value": "1012 Douglas",
											"type": "text"
										},
										{
											"key": "city",
											"value": "",
											"type": "text"
										},
										{
											"key": "postal_code",
											"value": "a1a 1a1",
											"type": "text"
										},
										{
											"key": "main_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "fax_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "website_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "province_state",
											"value": "BC",
											"type": "text"
										},
										{
											"key": "email",
											"value": "company@example.com",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v2/organizations?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"organizations"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Alteration - Person Responsible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var created_driller_guid = pm.environment.get('created_driller_guid');",
											"var company_guid = pm.environment.get('company_guid');",
											"var fields = {",
											"    \"consultant_company\": \"John Company\",",
											"\t\"consultant_name\": \"John Consultant\",",
											"\t\"driller_name\": \"John Person\",",
											"\t\"person_responsible\": created_driller_guid,",
											"\t\"company_of_person_responsible\": company_guid",
											"}",
											"",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"Object.keys(fields).forEach((key) => {",
											"    pm.test(`response contains ${key}`, function() {",
											"        pm.expect(key in jsonData).to.be.true;",
											"    })",
											"    pm.test(`field: ${key} returned`, function() {",
											"        pm.expect(jsonData[key]).to.equal(fields[key]);",
											"    })",
											"})",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"consultant_company\": \"John Company\",\n\t\"consultant_name\": \"John Consultant\",\n\t\"driller_name\": \"John Person\",\n\t\"person_responsible\": \"{{created_driller_guid}}\",\n\t\"company_of_person_responsible\": \"{{company_guid}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/alteration",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"alteration"
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Alteration - Person Responsible - Well Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var created_driller_guid = pm.environment.get('created_driller_guid');",
											"var fields = {",
											"    \"consultant_company\": \"John Company\",",
											"\t\"consultant_name\": \"John Consultant\",",
											"\t\"driller_name\": \"John Person\"",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"Object.keys(fields).forEach((key) => {",
											"    pm.test(`response contains ${key}`, function() {",
											"        pm.expect(key in jsonData).to.be.true;",
											"    })",
											"    pm.test(`field: ${key} returned`, function() {",
											"        pm.expect(jsonData[key]).to.equal(fields[key]);",
											"    })",
											"})",
											"",
											"pm.test('person_responsible returned', function() {",
											"    pm.expect(jsonData.person_responsible.person_guid).to.equal(created_driller_guid)",
											"})",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						}
					]
				},
				{
					"name": "Decommission",
					"item": [
						{
							"name": "Log in Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json()",
											"pm.environment.set(\"token\", jsonData.access_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
											"})",
											"",
											"pm.test(\"A token was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
											"    pm.expect(jsonData.access_token.length).to.be.above(36);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_server}}",
									"host": [
										"{{auth_server}}"
									]
								},
								"description": "Get token (log in)"
							},
							"response": []
						},
						{
							"name": "Decommission well",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"DEC\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"ALT_WELL_TEST_CITY\",\n\t\"owner_province_state\": \"BC\",\n\t\"work_start_date\": \"2018-01-01\",\n\t\"work_end_date\": \"2018-01-01\",\n\t\"decommission_description_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 1,\n\t\t\t\"material\": \"CONCRETE\",\n\t\t\t\"observations\": \"It worked!\"\n\t\t}\n\t],\n\t\"decommission_details\": \"Test\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/decommission?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"decommission"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Check decommission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expected well owner city to match the submitted alteration report\", function() {",
											"    pm.expect(jsonData.owner_city).to.equal(\"ALT_WELL_TEST_CITY\");",
											"})",
											"",
											"pm.test(\"Well status is 'closure'\", function() {",
											"    pm.expect(jsonData.well_status).to.equal(\"CLOSURE\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Check if the created well matched submission"
							},
							"response": []
						},
						{
							"name": "Check decommission - created decommission submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"   pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expected well owner city to match the submitted alteration report\", function() {",
											"    pm.expect(jsonData.owner_city).to.equal(\"ALT_WELL_TEST_CITY\");",
											"})",
											"",
											"pm.test(\"Expect linerperforation to be undefined\", function() {",
											"    pm.expect(jsonData.linerperforation_set).to.equal(undefined);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/{{filing_number}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"{{filing_number}}"
									]
								},
								"description": "Check if the submission was created correclty."
							},
							"response": []
						}
					]
				},
				{
					"name": "Staff Edit",
					"item": [
						{
							"name": "Well Location",
							"item": [
								{
									"name": "Construction Submission; for Well Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"well_tag_number\", jsonData.well);",
													"pm.environment.set('filing_number', jsonData.filing_number)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.expect(pm.response.code).to.equal(201);",
													"})",
													"",
													"pm.test(\"Expect well record to be created\", function() {",
													"    pm.expect(jsonData.well).to.be.ok;",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "JWT {{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "driller_responsible",
													"value": "{{created_driller_guid}}",
													"type": "text"
												},
												{
													"key": "work_end_date",
													"value": "2018-07-02",
													"type": "text"
												},
												{
													"key": "owner_full_name",
													"value": "Holly Homeowner",
													"type": "text"
												},
												{
													"key": "work_start_date",
													"value": "2018-07-01",
													"type": "text"
												},
												{
													"key": "owner_province_state",
													"value": "BC",
													"type": "text"
												},
												{
													"key": "owner_mailing_address",
													"value": "321 Main Street",
													"type": "text"
												},
												{
													"key": "owner_city",
													"value": "Anytown",
													"type": "text"
												},
												{
													"key": "consultant_name",
													"value": "John",
													"type": "text"
												},
												{
													"key": "well_orientation",
													"value": "True",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v2",
												"submissions",
												"construction"
											],
											"query": [
												{
													"key": "format",
													"value": "json"
												}
											]
										},
										"description": "Submit a construction submission"
									},
									"response": []
								},
								{
									"name": "Staff Edit; Well Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.expect(pm.response.code).to.equal(201);",
													"})",
													"",
													"pm.test(\"Expect well_tag_number to match created\", function() {",
													"    pm.expect(jsonData.well).to.equal(pm.environment.get(\"well_tag_number\"))",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "JWT {{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"street_address\": \"Some street\",\n\t\"city\":\"Some city\",\n\t\"legal_lot\":\"3\",\n\t\"legal_plan\":\"3\",\n\t\"legal_district_lot\":\"3\",\n\t\"legal_block\":\"3\",\n\t\"legal_section\":\"3\",\n\t\"legal_township\":\"3\",\n\t\"legal_range\":\"3\",\n\t\"land_district\":\"03\",\n\t\"legal_pid\":\"3\",\n\t\"well_location_description\":\"Description of well location\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v2",
												"submissions",
												"staff_edit"
											],
											"query": [
												{
													"key": "format",
													"value": "json"
												}
											]
										},
										"description": "Submit an edit submission"
									},
									"response": []
								},
								{
									"name": "Check Well Edited; Well Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json()",
													"",
													"var expected = {",
													"\t\"street_address\": \"Some street\",",
													"\t\"city\":\"Some city\",",
													"\t\"legal_lot\":\"3\",",
													"\t\"legal_plan\":\"3\",",
													"\t\"legal_district_lot\":\"3\",",
													"\t\"legal_block\":\"3\",",
													"\t\"legal_section\":\"3\",",
													"\t\"legal_township\":\"3\",",
													"\t\"legal_range\":\"3\",",
													"\t\"land_district\":\"03\",",
													"\t\"legal_pid\":\"000000003\",",
													"\t\"well_location_description\":\"Description of well location\"",
													"};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expect value to be updated\", function() {",
													"    for (var key in expected) {",
													"        pm.expect(jsonData[key], key).to.equal(expected[key]);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "JWT {{token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v2",
												"wells",
												"{{well_tag_number}}",
												"edit"
											]
										},
										"description": "Get a well"
									},
									"response": []
								}
							]
						},
						{
							"name": "Well Coordinates",
							"item": [
								{
									"name": "Staff Edit; Well Coordinate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"   pm.expect(pm.response.code).to.equal(201);",
													"})",
													"",
													"pm.test(\"Expect well_tag_number to match created\", function() {",
													"    pm.expect(jsonData.well).to.equal(pm.environment.get(\"well_tag_number\"))",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "JWT {{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"latitude\": 51,\n\t\"longitude\": -123,\n\t\"coordinate_acquisition_code\": \"B\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v2",
												"submissions",
												"staff_edit"
											],
											"query": [
												{
													"key": "format",
													"value": "json"
												}
											]
										},
										"description": "Submit an edit submission"
									},
									"response": []
								},
								{
									"name": "Check Well Edited; Well Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json()",
													"",
													"var expected = {",
													"\t\"latitude\": 51,",
													"\t\"longitude\": -123,",
													"\t\"coordinate_acquisition_code\": \"B\"",
													"};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Expect value to be updated\", function() {",
													"    for (var key in expected) {",
													"        pm.expect(jsonData[key], key).to.equal(expected[key]);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "JWT {{token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v2",
												"wells",
												"{{well_tag_number}}",
												"edit"
											]
										},
										"description": "Get a well"
									},
									"response": []
								}
							]
						},
						{
							"name": "Construction Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect well record to be created\", function() {",
											"    pm.expect(jsonData.well).to.be.ok;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "driller_responsible",
											"value": "{{created_driller_guid}}",
											"type": "text"
										},
										{
											"key": "work_end_date",
											"value": "2018-07-02",
											"type": "text"
										},
										{
											"key": "owner_full_name",
											"value": "Holly Homeowner",
											"type": "text"
										},
										{
											"key": "work_start_date",
											"value": "2018-07-01",
											"type": "text"
										},
										{
											"key": "owner_province_state",
											"value": "BC",
											"type": "text"
										},
										{
											"key": "owner_mailing_address",
											"value": "321 Main Street",
											"type": "text"
										},
										{
											"key": "owner_city",
											"value": "Anytown",
											"type": "text"
										},
										{
											"key": "consultant_name",
											"value": "John",
											"type": "text"
										},
										{
											"key": "well_orientation",
											"value": "True",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Staff Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect well_tag_number to match created\", function() {",
											"    pm.expect(jsonData.well).to.equal(pm.environment.get(\"well_tag_number\"))",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"consultant_name\": \"John Mann\",\n\t\"owner_full_name\": \"Buddy\",\n\t\"ground_elevation_method\": \"10K_MAP\",\n\t\"ground_elevation\": 12,\n\t\"drilling_methods\": [\"AIR_ROTARY\", \"AUGER\"],\n\t\"well_orientation_status\": \"HORIZONTAL\",\n\t\"observation_well_status\": \"Active\",\n\t\"observation_well_number\": 123,\n\t\"drawdown\": 11,\n\t\"yield_estimation_rate\": 11\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"staff_edit"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Check Well Edited",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test(\"Expect consultant name to be updated\", function() {",
											"    pm.expect(jsonData['consultant_name']).to.equal('John Mann')",
											"})",
											"",
											"pm.test(\"Expect owner name to be updated\", function() {",
											"    pm.expect(jsonData['owner_full_name']).to.equal('Buddy')",
											"})",
											"",
											"pm.test(\"Expect owner city to NOT be updated\", function() {",
											"    pm.expect(jsonData['owner_city']).to.equal('Anytown')",
											"})",
											"",
											"pm.test(\"Expect well orientation status to be updated\", function() {",
											"    pm.expect(jsonData['well_orientation_status']).to.equal('HORIZONTAL')",
											"})",
											"",
											"pm.test(\"Expect other_drilling_method to be updated\", function() {",
											"    pm.expect(jsonData['drilling_methods'].indexOf(\"AUGER\") > -1).to.equal(true)",
											"})",
											"",
											"pm.test(\"Expect observation_well_number to be updated\", function() {",
											"    pm.expect(jsonData['observation_well_number']).to.equal('123')",
											"})",
											"",
											"pm.test(\"Expect observation_well_status to be updated\", function() {",
											"    pm.expect(jsonData['observation_well_status']).to.equal('Active')",
											"})",
											"",
											"pm.test(\"Expect production data - yield estimation rate to be updated\", function() {",
											"    pm.expect(jsonData.yield_estimation_rate).to.equal(\"11.00\")",
											"})",
											"",
											"pm.test(\"Expect the well_yield_unit to default to USGPM\", function() {",
											"    pm.expect(jsonData.well_yield_unit).to.equal(\"USGPM\")",
											"})",
											"",
											"pm.test(\"Expect production data - drawdown to be updated\", function() {",
											"    pm.expect(jsonData.drawdown).to.equal(\"11.00\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"wells",
										"{{well_tag_number}}",
										"edit"
									]
								},
								"description": "Request a list of wells"
							},
							"response": []
						},
						{
							"name": "Construction Submission - with foreign key sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"well_tag_number\", jsonData.well);",
											"pm.environment.set('filing_number', jsonData.filing_number)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect well record to be created\", function() {",
											"    pm.expect(jsonData.well).to.be.ok;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"liner_diameter\": 1,\n\t\"liner_from\": 0,\n\t\"liner_material\": \"PVC\",\n\t\"liner_thickness\": 2,\n\t\"liner_to\": 3,\n\t\"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 10\n\t\t},\n\t\t\t\t{\n\t\t\t\"start\": 10,\n\t\t\t\"end\": 12\n\t\t}\n\t],\n\t\"drawdown\": 10,\n\t\"yield_estimation_rate\": 10\n}\n"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"construction"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Staff Edit - Replace sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect well_tag_number to match created\", function() {",
											"    pm.expect(jsonData.well).to.equal(pm.environment.get(\"well_tag_number\"))",
											"})",
											"",
											"pm.test(\"Expect liner set to be updated\", function() {",
											"    pm.expect(jsonData.linerperforation_set[0].end).to.equal(\"8.00\")",
											"    pm.expect(jsonData.linerperforation_set[1].start).to.equal(\"8.00\")",
											"})",
											"pm.test(\"Expect screen set to be updated\", function() {",
											"    pm.expect(jsonData.screen_set[0].end).to.equal(\"15.00\")",
											"    pm.expect(jsonData.screen_set[1].start).to.equal(\"15.00\")",
											"})",
											"pm.test(\"Expect casing set to be updated\", function() {",
											"    pm.expect(jsonData.casing_set[0].end).to.equal(\"2.00\")",
											"    pm.expect(jsonData.casing_set[1].start).to.equal(\"4.00\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"consultant_name\": \"John Mann\",\n\t\"owner_full_name\": \"Buddy\",\n\t\"ground_elevation_method\": \"10K_MAP\",\n\t\"ground_elevation\": 12,\n\t\"drilling_method\": \"AIR_ROTARY\",\n\t\"other_drilling_method\": \"Shovel\",\n    \"well_orientation_status\": \"VERTICAL\",\n\t\"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 8\n\t\t},\n\t\t{\n\t\t\t\"start\": 8,\n\t\t\t\"end\": 12\n\t\t}\n\t],\n\t\"screen_set\": [\n\t\t{\n\t\t\t\"start\": 5,\n\t\t\t\"end\": 15,\n\t\t\t\"assembly_type\": \"SCREEN\"\n\t\t},\n\t\t{\n\t\t\t\"start\": 15,\n\t\t\t\"end\": 20,\n\t\t\t\"assembly_type\": \"SCREEN\"\n\t\t}\n\t],\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"1\",\n\t\t\t\"end\":\"2\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t},\n\t\t{\n\t\t\t\"casing_code\":\"SURFACE\",\n\t\t\t\"start\":\"4\",\n\t\t\t\"casing_material\":\"STEEL\",\n\t\t\t\"end\":\"8\",\n\t\t\t\"diameter\":\"2\",\n\t\t\t\"drive_shoe\":\"True\",\n\t\t\t\"id\":1,\n\t\t\t\"wall_thickness\":\"7\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"staff_edit"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Create aquifer for well",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"created_aquifer_for_well\", jsonData.aquifer_id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "aquifer_name",
											"value": "Cool Aquifer",
											"type": "text"
										},
										{
											"key": "area",
											"value": "10",
											"type": "text"
										},
										{
											"key": "demand",
											"value": "H",
											"type": "text"
										},
										{
											"key": "known_water_use",
											"value": "M",
											"type": "text"
										},
										{
											"key": "litho_stratographic_unit",
											"value": "Aquifer Litho Stratographic Unit",
											"type": "text"
										},
										{
											"key": "location_description",
											"value": "Location Description",
											"type": "text"
										},
										{
											"key": "mapping_year",
											"value": "1991",
											"type": "text"
										},
										{
											"key": "material",
											"value": "B",
											"type": "text"
										},
										{
											"key": "notes",
											"value": "Notes",
											"type": "text"
										},
										{
											"key": "productivity",
											"value": "H",
											"type": "text"
										},
										{
											"key": "quality_concern",
											"value": "N",
											"type": "text"
										},
										{
											"key": "subtype",
											"value": "1a",
											"type": "text"
										},
										{
											"key": "vulnerability",
											"value": "H",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v2/aquifers",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"aquifers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Staff Edit - Associate well with aquifer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect aquifer id to match created aquifer\", function() {",
											"    pm.expect(jsonData.aquifer).to.equal(pm.environment.get(\"created_aquifer_for_well\"))",
											"})",
											"",
											"pm.test(\"Expect storativity to be 1\", function() {",
											"    pm.expect(Number(jsonData.storativity)).to.equal(1)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"aquifer\": {{created_aquifer_for_well}},\n\t\"storativity\": 1\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"staff_edit"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						},
						{
							"name": "Staff Edit - remove foreign key set data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"   pm.expect(pm.response.code).to.equal(201);",
											"})",
											"",
											"pm.test(\"Expect liner set to be deleted\", function() {",
											"    pm.expect(jsonData.linerperforation_set.length).to.equal(0)",
											"})",
											"",
											"pm.test(\"Expect storativity to be null\", function() {",
											"    pm.expect(jsonData.storativity).to.equal(null)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"well\": {{well_tag_number}},\n\t\"linerperforation_set\": [],\n\t\"storativity\": null\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v2/submissions/staff_edit?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v2",
										"submissions",
										"staff_edit"
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Submit a submission"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Stacking",
			"item": [
				{
					"name": "Submission - construction submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"well_tag_number\", jsonData.well);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"well_activity_type\": \"CON\",\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"0\",\n\t\t\t\"end\":\"10\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t}\n\t],\n\t\"screen_set\": [\n        {\n            \"start\": \"0.00\",\n            \"end\": \"10.00\",\n            \"internal_diameter\": null,\n            \"assembly_type\": null,\n            \"slot_size\": null\n        }\n    ],\n    \"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 10\n\t\t}\n\t],\n\t\"well_class\": \"GEOTECH\",\n\t\"driller_name\": \"Bob\",\n\t\"consultant_name\": \"Lois\",\n\t\"consultant_company\": \"Lois Consulting\",\n\t\"work_start_date\": \"2018-01-01\",\n\t\"work_end_date\": \"2018-01-01\",\n\t\"legal_pid\": \"123132\",\n\t\"well_location_description\": \"At the top of the hill\",\n\t\"latitude\": 48.420133,\n\t\"longitude\": -123.370083,\n\t\"ground_elevation\": 1,\n\t\"ground_elevation_method\":\"UNKNOWN\",\n\t\"drilling_method\": \"AUGER\",\n\t\"well_orientation\": \"False\",\n\t\"water_supply_system_name\": \"Pond\",\n\t\"water_supply_system_well_name\": \"1\",\n\t\"surface_seal_material\": \"BNTITE_CLY\",\n\t\"surface_seal_depth\": 1,\n\t\"surface_seal_method\": \"OTHER\",\n\t\"liner_material\": \"PVC\",\n\t\"screen_material\": \"PLASTIC\",\n\t\"development_method\": \"BAIL\",\n\t\"well_yield\": \"5.22\",\n\t\"finished_well_depth\": \"55\",\n\t\"total_depth_drilled\": \"58\",\n\t\"final_casing_stick_up\": \"3\",\n\t\"static_water_level\": \"12\",\n\t\"artesian_flow\": \"6.55\",\n\t\"well_disinfected\": \"True\",\n\t\"comments\": \"This is a well\",\n\t\"diameter\": \"3\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"construction"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Submission - alteration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test(\"Well tag number to persist\", function() {",
									"    pm.expect(jsonData.well).to.equal(pm.environment.get('well_tag_number'))",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"well_activity_type\": \"ALT\",\n\t\"well\": {{well_tag_number}},\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"work_start_date\": \"2018-01-02\",\n\t\"work_end_date\": \"2018-01-02\",\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"10\",\n\t\t\t\"end\":\"20\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t}\n\t],\n\t\"screen_set\": [\n        {\n            \"start\": \"10.00\",\n            \"end\": \"20.00\",\n            \"internal_diameter\": null,\n            \"assembly_type\": null,\n            \"slot_size\": null\n        }\n    ],\n    \"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 10,\n\t\t\t\"end\": 20\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/alteration?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"alteration"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Check submission - well updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Expect casing list to contain two entries\", function() {",
									"    pm.expect(jsonData.casing_set.length).to.equal(2);",
									"})",
									"",
									"pm.test(\"Expect screen list empty\", function() {",
									"    pm.expect(jsonData.screen_set.length).to.equal(2);",
									"})",
									"",
									"pm.test(\"Expect linerperforation to be empty\", function() {",
									"    pm.expect(jsonData.linerperforation_set.length).to.equal(2);",
									"})",
									"",
									"pm.test(\"Well status is 'NEW'\", function() {",
									"    pm.expect(jsonData.well_status).to.equal(\"ALTERATION\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"edit"
							]
						},
						"description": "Check if the created well matched submission"
					},
					"response": []
				},
				{
					"name": "Submission - alteration - intersecting data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test(\"Well tag number to persist\", function() {",
									"    pm.expect(jsonData.well).to.equal(pm.environment.get('well_tag_number'))",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"well_activity_type\": \"ALT\",\n\t\"well\": {{well_tag_number}},\n\t\"work_start_date\": \"2018-01-03\",\n\t\"work_end_date\": \"2018-01-03\",\n\t\"casing_set\": [\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"10\",\n\t\t\t\"end\":\"15\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t},\n\t\t{\n\t\t\t\"casing_code\": \"SURFACE\",\n\t\t\t\"start\":\"15\",\n\t\t\t\"end\":\"20\",\n\t\t\t\"diameter\":\"1\",\n\t\t\t\"drive_shoe\":\"False\",\n\t\t\t\"id\":0,\n\t\t\t\"wall_thickness\":\"87\"\n\t\t}\n\t],\n\t\"screen_set\": [\n        {\n            \"start\": \"10.00\",\n            \"end\": \"15.00\",\n            \"internal_diameter\": null,\n            \"assembly_type\": null,\n            \"slot_size\": null\n        },\n        {\n            \"start\": \"15.00\",\n            \"end\": \"20.00\",\n            \"internal_diameter\": null,\n            \"assembly_type\": null,\n            \"slot_size\": null\n        }\n    ],\n    \"linerperforation_set\": [\n\t\t{\n\t\t\t\"start\": 10,\n\t\t\t\"end\": 15\n\t\t},\n\t\t{\n\t\t\t\"start\": 15,\n\t\t\t\"end\": 20\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/alteration?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"alteration"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Check submission - well stacked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Expect casing list to contain two entries\", function() {",
									"    pm.expect(jsonData.casing_set.length).to.equal(3);",
									"})",
									"",
									"pm.test(\"Expect screen list empty\", function() {",
									"    pm.expect(jsonData.screen_set.length).to.equal(3);",
									"})",
									"",
									"pm.test(\"Expect linerperforation to be empty\", function() {",
									"    pm.expect(jsonData.linerperforation_set.length).to.equal(3);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"edit"
							]
						},
						"description": "Check if the created well has stacked data"
					},
					"response": []
				},
				{
					"name": "Decommission well",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.environment.set(\"well_tag_number\", jsonData.well);",
									"pm.environment.set('filing_number', jsonData.filing_number)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"well_activity_type\": \"ALT\",\n\t\"well\": {{well_tag_number}},\n\t\"owner_full_name\": \"Bob\",\n\t\"owner_mailing_address\": \"123 Place\",\n\t\"owner_city\": \"Victoria\",\n\t\"owner_province_state\": \"BC\",\n\t\"work_start_date\": \"2018-01-04\",\n\t\"work_end_date\": \"2018-01-04\",\n\t\"decommission_description_set\": [\n\t\t{\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 1,\n\t\t\t\"material\": \"CONCRETE\",\n\t\t\t\"observations\": \"It worked!\"\n\t\t}\n\t],\n\t\"decommission_details\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/decommission?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"decommission"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Check well - decommissioned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Expect casing list to contain two entries\", function() {",
									"    pm.expect(jsonData.casing_set.length).to.equal(3);",
									"})",
									"",
									"pm.test(\"Expect screen list empty\", function() {",
									"    pm.expect(jsonData.screen_set.length).to.equal(3);",
									"})",
									"",
									"pm.test(\"Expect linerperforation to be empty\", function() {",
									"    pm.expect(jsonData.linerperforation_set.length).to.equal(3);",
									"})",
									"",
									"pm.test(\"Well status is 'closure'\", function() {",
									"    pm.expect(jsonData.well_status).to.equal(\"CLOSURE\");",
									"})",
									"",
									"pm.test(\"Latitude/Longitude is same as the initial construction report\", function() {",
									"    pm.expect(jsonData.latitude).to.equal(48.420133);",
									"    pm.expect(jsonData.longitude).to.equal(-123.370083);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{well_tag_number}}/edit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{well_tag_number}}",
								"edit"
							]
						},
						"description": "Check if the created well has stacked data"
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean up",
			"item": [
				{
					"name": "Driller delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v2/drillers/{{created_driller_guid}}?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"drillers",
								"{{created_driller_guid}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Delete driller specified by GUID."
					},
					"response": []
				}
			]
		}
	]
}
