{
	"info": {
		"_postman_id": "4463d1cb-afac-47db-8fc6-d67d3886a4e3",
		"name": "Well List API filters",
		"description": "Well List API endpoint filters required for advanced search options.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search",
			"item": [
				{
					"name": "search param (matching well tag)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"pm.test(\"Well tag number matches filter\", function () {",
									"  const wellParam = parseInt(pm.request.url.query.get(\"search\"));",
									"  pm.response.json().results.forEach(function(result) {",
									"    pm.expect(result.well_tag_number).to.equal(wellParam);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?search=216265",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "search",
									"value": "216265"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search param (matching id plate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"pm.test(\"Well id plate matches filter\", function () {",
									"  const wellParam = parseInt(pm.request.url.query.get(\"search\"));",
									"  pm.response.json().results.forEach(function(result) {",
									"    pm.expect(result.identification_plate_number).to.equal(wellParam);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?search=55555",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "search",
									"value": "55555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search param (matching street address)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"pm.test(\"Street address matches filter\", function () {",
									"  const streetAddress = pm.request.url.query.get(\"search\").toLowerCase();",
									"  pm.response.json().results.forEach(function(result) {",
									"    pm.expect(result.street_address.toLowerCase()).to.include(streetAddress);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?search=1234 Main",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "search",
									"value": "1234 Main"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search param (matching city)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"pm.test(\"City matches filter\", function () {",
									"  const city = pm.request.url.query.get(\"search\").toLowerCase();",
									"  pm.response.json().results.forEach(function(result) {",
									"    pm.expect(result.city.toLowerCase()).to.include(city);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?search=vancouver",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "search",
									"value": "vancouver"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search param (matching owner_full_name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"pm.test(\"Owner matches filter\", function () {",
									"  const ownerFullName = pm.request.url.query.get(\"search\").toLowerCase();",
									"  pm.response.json().results.forEach(function(result) {",
									"    pm.expect(result.owner_full_name.toLowerCase()).to.include(ownerFullName);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?search=Alice S",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "search",
									"value": "Alice S"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4836e08d-af4c-4af0-80ea-ca5c49ba6f5e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cfd20e05-db81-4565-82c0-15ff3c0519eb",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status ok\", function () {",
							"  pm.response.to.be.ok;",
							"});",
							"pm.test(\"At least one result\", function () {",
							"  pm.expect(pm.response.json().count).to.be.at.least(1);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Filters",
			"item": [
				{
					"name": "Multiple field match filters",
					"item": [
						{
							"name": "well param (matching well tag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well tag number matches filter\", function () {",
											"  const wellParam = parseInt(pm.request.url.query.get(\"well\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_tag_number).to.equal(wellParam);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well=216265",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well",
											"value": "216265"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well param (matching id plate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well id plate matches filter\", function () {",
											"  const wellParam = parseInt(pm.request.url.query.get(\"well\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.identification_plate_number).to.equal(wellParam);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well=55555",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well",
											"value": "55555"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "street_address_or_city param (matching street address)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Street address matches filter\", function () {",
											"  const streetAddress = pm.request.url.query.get(\"street_address_or_city\").toLowerCase();",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.street_address.toLowerCase()).to.include(streetAddress);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?street_address_or_city=1234 Main",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "street_address_or_city",
											"value": "1234 Main"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "street_address_or_city param (matching city)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"City matches filter\", function () {",
											"  const city = pm.request.url.query.get(\"street_address_or_city\").toLowerCase();",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.city.toLowerCase()).to.include(city);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?street_address_or_city=vancouver",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "street_address_or_city",
											"value": "vancouver"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "date_of_work param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Construction start date field matches filter\", function () {",
											"  const dateOfWorkBefore = new Date(pm.request.url.query.get(\"date_of_work_before\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const constructionStartDate = new Date(result.construction_start_date);",
											"    pm.expect(constructionStartDate).to.be.at.most(dateOfWorkBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?date_of_work_before=1975-12-31",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "date_of_work_before",
											"value": "1975-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "date_of_work param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Decommission end date field matches filter\", function () {",
											"  const dateOfWorkAfter = new Date(pm.request.url.query.get(\"date_of_work_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const decommissionEndDate = new Date(result.decommission_end_date);",
											"    pm.expect(decommissionEndDate).to.be.at.least(dateOfWorkAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?date_of_work_after=2019-02-07",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "date_of_work_after",
											"value": "2019-02-07"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_depth param (range minimum)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Finished well depth matches filter\", function () {",
											"  const wellDepthMin = parseInt(pm.request.url.query.get(\"well_depth_min\"));",
											"  const wellDepthMax = parseInt(pm.request.url.query.get(\"well_depth_max\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(parseFloat(result.finished_well_depth)).to.be.within(wellDepthMin, wellDepthMax);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_depth_min=100&well_depth_max=185",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_depth_min",
											"value": "100"
										},
										{
											"key": "well_depth_max",
											"value": "185"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_depth param (range maximum)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Finished well depth matches filter\", function () {",
											"  const wellDepthMax = parseInt(pm.request.url.query.get(\"well_depth_max\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(parseFloat(result.finished_well_depth)).to.be.at.most(wellDepthMax);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_depth_max=185",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_depth_max",
											"value": "185"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal param (matching legal_lot)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal lot matches filter\", function () {",
											"  const legalLot = pm.request.url.query.get(\"legal\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_lot).to.equal(legalLot);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal=1Q",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal",
											"value": "1Q"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal param (matching legal_pid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal PID matches filter\", function () {",
											"  const legalPID = parseInt(pm.request.url.query.get(\"legal\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_pid).to.equal(legalPID);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal=555555",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal",
											"value": "555555"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests for customized filters, i.e. those that search across multiple db fields.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38a07f32-d36f-4c9a-928c-fc9b6e3a732d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73823139-d38a-4c9c-89b4-12d2a4d97924",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Exact match filters",
					"item": [
						{
							"name": "well_tag_number param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well tag number matches filter\", function () {",
											"  const wellTagNumber = parseInt(pm.request.url.query.get(\"well_tag_number\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_tag_number).to.equal(wellTagNumber);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_tag_number=216265",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_tag_number",
											"value": "216265"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "identification_plate_number param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well id plate matches filter\", function () {",
											"  const idPlateNumber = parseInt(pm.request.url.query.get(\"identification_plate_number\"));",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.identification_plate_number).to.equal(idPlateNumber);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?identification_plate_number=55555",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "identification_plate_number",
											"value": "55555"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_lot param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal lot matches filter\", function () {",
											"  const legalLot = pm.request.url.query.get(\"legal_lot\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_lot).to.equal(legalLot);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_lot=1Q",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_lot",
											"value": "1Q"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_plan param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal plan matches filter\", function () {",
											"  const legalPlan = pm.request.url.query.get(\"legal_plan\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"      pm.expect(result.legal_plan).to.equal(legalPlan);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_plan=555",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_plan",
											"value": "555"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_district_lot param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal district lot matches filter\", function () {",
											"  const legalDistrictLot = pm.request.url.query.get(\"legal_district_lot\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_district_lot).to.equal(legalDistrictLot);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_district_lot=20000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_district_lot",
											"value": "20000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "land_district param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Land district matches filter\", function () {",
											"  const landDistrict = pm.request.url.query.get(\"land_district\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.land_district).to.equal(landDistrict);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?land_district=36",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "land_district",
											"value": "36"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_pid param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal PID matches filter\", function () {",
											"  const legalPID = parseInt(pm.request.url.query.get(\"legal_pid\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_pid).to.equal(legalPID);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_pid=555555",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_pid",
											"value": "555555"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_status param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well status matches filter\", function () {",
											"  const wellStatus = pm.request.url.query.get(\"well_status\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_status).to.equal(wellStatus);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_status=OTHER",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_status",
											"value": "OTHER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "licenced_status param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Licenced status matches filter\", function () {",
											"  const licencedStatus = pm.request.url.query.get(\"licenced_status\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.licenced_status).to.equal(licencedStatus);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?licenced_status=LICENSED",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "licenced_status",
											"value": "LICENSED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_class param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well class matches filter\", function () {",
											"  const wellClass = pm.request.url.query.get(\"well_class\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_class).to.equal(wellClass);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_class=WATR_SPPLY",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_class",
											"value": "WATR_SPPLY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_subclass param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well subclass matches filter\", function () {",
											"  const wellSubclass = pm.request.url.query.get(\"well_subclass\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_subclass).to.equal(wellSubclass);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_subclass=5a313ffe-47e7-11e7-a919-92ebcb67fe33",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_subclass",
											"value": "5a313ffe-47e7-11e7-a919-92ebcb67fe33"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_block param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal block matches filter\", function () {",
											"  const legalBlock = pm.request.url.query.get(\"legal_block\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_block).to.equal(legalBlock);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_block=block",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_block",
											"value": "block"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_township param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal township matches filter\", function () {",
											"  const legalTownship = pm.request.url.query.get(\"legal_township\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_township).to.equal(legalTownship);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_township=township",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_township",
											"value": "township"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "legal_range param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Legal range matches filter\", function () {",
											"  const legalRange = pm.request.url.query.get(\"legal_range\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.legal_range).to.equal(legalRange);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?legal_range=3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "legal_range",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "drilling_company param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Drilling company matches filter\", function () {",
											"  const drillingCompany = pm.request.url.query.get(\"drilling_company\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.drilling_company).to.equal(drillingCompany);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?drilling_company=f606669c-a60c-422d-859a-fdc54278d9b0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "drilling_company",
											"value": "f606669c-a60c-422d-859a-fdc54278d9b0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "coordinate_acquisition_code param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Coordinate acquisition code matches filter\", function () {",
											"  const coordinateAcquisitionCode = pm.request.url.query.get(\"coordinate_acquisition_code\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.coordinate_acquisition_code).to.equal(coordinateAcquisitionCode);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?coordinate_acquisition_code=H",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "coordinate_acquisition_code",
											"value": "H"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ground_elevation_method param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Ground elevation method matches filter\", function () {",
											"  const groundElevationMethod = pm.request.url.query.get(\"ground_elevation_method\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.ground_elevation_method).to.equal(groundElevationMethod);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?ground_elevation_method=GPS",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "ground_elevation_method",
											"value": "GPS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "surface_seal_material param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Surface seal material matches filter\", function () {",
											"  const surfaceSealMaterial = pm.request.url.query.get(\"surface_seal_material\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.surface_seal_material).to.equal(surfaceSealMaterial);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?surface_seal_material=SND_CMT_GT",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "surface_seal_material",
											"value": "SND_CMT_GT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20e30eb4-2393-49e8-b606-be718fa1c6b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0f8c39f1-546a-4879-9797-2c96ee885536",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Date range filters",
					"item": [
						{
							"name": "construction_start_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Construction start date matches filter\", function () {",
											"  const constructionStartBefore = new Date(pm.request.url.query.get(\"construction_start_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const constructionStartDate = new Date(result.construction_start_date);",
											"    pm.expect(constructionStartDate).to.be.at.most(constructionStartBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?construction_start_date_before=1975-12-31",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "construction_start_date_before",
											"value": "1975-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "construction_start_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Construction start date matches filter\", function () {",
											"  const constructionStartAfter = new Date(pm.request.url.query.get(\"construction_start_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const constructionStartDate = new Date(result.construction_start_date);",
											"    pm.expect(constructionStartDate).to.be.at.least(constructionStartAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?construction_start_date_after=1975-01-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "construction_start_date_after",
											"value": "1975-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "construction_end_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Construction end date matches filter\", function () {",
											"  const constructionEndBefore = new Date(pm.request.url.query.get(\"construction_end_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const constructionEndDate = new Date(result.construction_end_date);",
											"    pm.expect(constructionEndDate).to.be.at.most(constructionEndBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?construction_end_date_before=1976-12-31",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "construction_end_date_before",
											"value": "1976-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "construction_end_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Construction end date matches filter\", function () {",
											"  const constructionEndAfter = new Date(pm.request.url.query.get(\"construction_end_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const constructionEndDate = new Date(result.construction_end_date);",
											"    pm.expect(constructionEndDate).to.be.at.least(constructionEndAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?construction_end_date_after=1976-01-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "construction_end_date_after",
											"value": "1976-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "alteration_start_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Alteration start date matches filter\", function () {",
											"  const alterationStartBefore = new Date(pm.request.url.query.get(\"alteration_start_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const alterationStartDate = new Date(result.alteration_start_date);",
											"    pm.expect(alterationStartDate).to.be.at.most(alterationStartBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?alteration_start_date_before=2014-12-31",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "alteration_start_date_before",
											"value": "2014-12-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "alteration_start_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Alteration start date matches filter\", function () {",
											"  const alterationStartAfter = new Date(pm.request.url.query.get(\"alteration_start_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const alterationStartDate = new Date(result.alteration_start_date);",
											"    pm.expect(alterationStartDate).to.be.at.least(alterationStartAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?alteration_start_date_after=2014-01-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "alteration_start_date_after",
											"value": "2014-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "alteration_end_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Alteration end date matches filter\", function () {",
											"  const alterationEndBefore = new Date(pm.request.url.query.get(\"alteration_end_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const alterationEndDate = new Date(result.alteration_end_date);",
											"    pm.expect(alterationEndDate).to.be.at.most(alterationEndBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?alteration_end_date_before=2019-01-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "alteration_end_date_before",
											"value": "2019-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "alteration_end_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Alteration end date matches filter\", function () {",
											"  const alterationEndAfter = new Date(pm.request.url.query.get(\"alteration_end_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const alterationEndDate = new Date(result.alteration_end_date);",
											"    pm.expect(alterationEndDate).to.be.at.least(alterationEndAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?alteration_end_date_after=2018-12-30",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "alteration_end_date_after",
											"value": "2018-12-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "decommission_start_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Decommission end date matches filter\", function () {",
											"  const decommissionStartBefore = new Date(pm.request.url.query.get(\"decommission_start_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const decommissionStartDate = new Date(result.decommission_start_date);",
											"    pm.expect(decommissionStartDate).to.be.at.most(decommissionStartBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?decommission_start_date_before=2019-02-03",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "decommission_start_date_before",
											"value": "2019-02-03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "decommission_start_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Decommission end date matches filter\", function () {",
											"  const decommissionStartAfter = new Date(pm.request.url.query.get(\"decommission_start_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const decommissionStartDate = new Date(result.decommission_start_date);",
											"    pm.expect(decommissionStartDate).to.be.at.least(decommissionStartAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?decommission_start_date_after=2019-02-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "decommission_start_date_after",
											"value": "2019-02-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "decommission_end_date param (date range before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Decommission end date matches filter\", function () {",
											"  const decommissionEndBefore = new Date(pm.request.url.query.get(\"decommission_end_date_before\"));",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    const decommissionEndDate = new Date(result.decommission_end_date);",
											"    pm.expect(decommissionEndDate).to.be.at.most(decommissionEndBefore);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?decommission_end_date_before=2019-02-09",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "decommission_end_date_before",
											"value": "2019-02-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "decommission_end_date param (date range after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Decommission end date matches filter\", function () {",
											"  const decommissionEndAfter = new Date(pm.request.url.query.get(\"decommission_end_date_after\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const decommissionEndDate = new Date(result.decommission_end_date);",
											"    pm.expect(decommissionEndDate).to.be.at.least(decommissionEndAfter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?decommission_end_date_after=2019-02-07",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "decommission_end_date_after",
											"value": "2019-02-07"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e83bc7e-9776-4973-b75f-98525319da24",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d6bb995-6356-434e-9573-7f78f8e812be",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Numeric range filters",
					"item": [
						{
							"name": "liner_diameter param (range minimum)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Liner diameter matches filter\", function () {",
											"  const linerDiameter = parseFloat(pm.request.url.query.get(\"liner_diameter_min\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const liner_diameter = parseFloat(result.liner_diameter);",
											"",
											"    pm.expect(liner_diameter).to.be.at.least(linerDiameter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?liner_diameter_min=1.3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "liner_diameter_min",
											"value": "1.3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "liner_diameter param (range maximum)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Liner diameter matches filter\", function () {",
											"  const linerDiameter = parseFloat(pm.request.url.query.get(\"liner_diameter_max\"));",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    const liner_diameter = parseFloat(result.liner_diameter);",
											"",
											"    pm.expect(liner_diameter).to.be.at.most(linerDiameter);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?liner_diameter_max=1.6",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "liner_diameter_max",
											"value": "1.6"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "081d1206-8782-4784-9078-b6c0b5b915ba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5d8f186c-7c77-4a07-8d18-854fd7886e61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Boolean filters",
					"item": [
						{
							"name": "well_orientation param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well orientation matches filter\", function () {",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_orientation).to.be.false;",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_orientation=False",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_orientation",
											"value": "False"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8aa83863-3424-454d-b02e-03d2077b9b48",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "716dd774-8ca7-4377-afa1-06796ba9fa76",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partial text match filters",
					"item": [
						{
							"name": "street_address param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Street address matches filter\", function () {",
											"  const streetAddress = pm.request.url.query.get(\"street_address\").toLowerCase();",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.street_address.toLowerCase()).to.include(streetAddress);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?street_address=Main st",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "street_address",
											"value": "Main st"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "owner_full_name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Owner matches filter\", function () {",
											"  const ownerFullName = pm.request.url.query.get(\"owner_full_name\").toLowerCase();",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.owner_full_name.toLowerCase()).to.include(ownerFullName);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?owner_full_name=Alice",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "owner_full_name",
											"value": "Alice"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_location_description param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well location description matches filter\", function () {",
											"  const wellLocationDesc = pm.request.url.query.get(\"well_location_description\");",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_location_description.toLowerCase()).to.include(wellLocationDesc);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_location_description=highway 95",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_location_description",
											"value": "highway 95"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "well_identification_plate_attached param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Well identification plate attached matches filter\", function () {",
											"  const wellIdPlateAttached = pm.request.url.query.get(\"well_identification_plate_attached\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.well_identification_plate_attached.toLowerCase()).to.contain(wellIdPlateAttached);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_identification_plate_attached=casing",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_identification_plate_attached",
											"value": "casing"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "water_supply_system_name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Water supply system name matches filter\", function () {",
											"  const waterSupplySystemName = pm.request.url.query.get(\"water_supply_system_name\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.water_supply_system_name.toLowerCase()).to.contain(waterSupplySystemName);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?water_supply_system_name=test",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "water_supply_system_name",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "water_supply_system_well_name param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Water supply system well name matches filter\", function () {",
											"  const waterSupplySystemWellName = pm.request.url.query.get(\"water_supply_system_well_name\");",
											" ",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.water_supply_system_well_name).to.contain(waterSupplySystemWellName);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?water_supply_system_well_name=test",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "water_supply_system_well_name",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Case insensitive partial text matches.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b9dd171-effb-4d2c-8685-834961415d6a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71dc461d-95ac-46ff-80ff-72ba2053df07",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Many to many filters",
					"item": [
						{
							"name": "water_quality_characteristics param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca2d9c99-5e4d-4861-9f37-e376eccd94dc",
										"exec": [
											"pm.test(\"Water quality characteristics matches filter\", () => {",
											"  const waterQualityCharacteristics = ['CLOUDY', 'SALTY'];",
											"",
											"  pm.response.json().results.forEach((result) => {",
											"    const matchingCharacteristics = result.water_quality_characteristics.filter(code => waterQualityCharacteristics.includes(code));",
											"    pm.expect(matchingCharacteristics.length).to.be.at.least(1);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?water_quality_characteristics=SALTY&water_quality_characteristics=CLOUDY",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "water_quality_characteristics",
											"value": "SALTY"
										},
										{
											"key": "water_quality_characteristics",
											"value": "CLOUDY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "drilling_methods param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											"pm.test(\"Drilling method matches filter\", function () {",
											"  const drillingMethod = pm.request.url.query.get(\"drilling_methods\");",
											"",
											"  pm.response.json().results.forEach(function(result) {",
											"    pm.expect(result.drilling_methods).to.include(drillingMethod);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?drilling_methods=DUGOUT",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "drilling_methods",
											"value": "DUGOUT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2a1ad34-bb98-4b02-b341-047338fc4fe1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0869bfa7-9392-4b7c-be3c-909241c29234",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status ok\", function () {",
									"  pm.response.to.be.ok;",
									"});",
									"pm.test(\"At least one result\", function () {",
									"  pm.expect(pm.response.json().count).to.be.at.least(1);",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lat/long point filters",
					"item": [
						{
							"name": "sw_long, sw_lat, ne_long and ne_lat params (valid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f7946c-15e1-41ea-bcc8-ed7d121f5761",
										"exec": [
											"pm.test(\"Response status ok\", function () {",
											"  pm.response.to.be.ok;",
											"});",
											"pm.test(\"At least one result\", function () {",
											"  pm.expect(pm.response.json().count).to.be.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?sw_long=-122.60&sw_lat=49.24&ne_long=-122.58&ne_lat=49.26",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "sw_long",
											"value": "-122.60"
										},
										{
											"key": "sw_lat",
											"value": "49.24"
										},
										{
											"key": "ne_long",
											"value": "-122.58"
										},
										{
											"key": "ne_lat",
											"value": "49.26"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sw_long, sw_lat and ne_long params (missing ne_lat)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f7946c-15e1-41ea-bcc8-ed7d121f5761",
										"exec": [
											"pm.test(\"Response status ok\", function () {",
											"  pm.response.to.be.ok;",
											"});",
											"pm.test(\"At least one result\", function () {",
											"  pm.expect(pm.response.json().count).to.be.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?sw_long=-122.60&sw_lat=49.24&ne_long=-122.58",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "sw_long",
											"value": "-122.60"
										},
										{
											"key": "sw_lat",
											"value": "49.24"
										},
										{
											"key": "ne_long",
											"value": "-122.58"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sw_long, sw_lat, ne_long and ne_lat param (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19dcd02f-9e31-4876-9102-fe274f4d678e",
										"exec": [
											"pm.test(\"Response status ok\", function () {",
											"  pm.response.to.be.ok;",
											"});",
											"pm.test(\"At least one result\", function () {",
											"  pm.expect(pm.response.json().count).to.be.at.least(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?sw_lat=bar&sw_long=foo&ne_long=test&ne_lat=avalue",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "sw_lat",
											"value": "bar"
										},
										{
											"key": "sw_long",
											"value": "foo"
										},
										{
											"key": "ne_long",
											"value": "test"
										},
										{
											"key": "ne_lat",
											"value": "avalue"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ec0a743-32fa-41cc-bde9-490baab9459a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62d9d922-c2e8-4c93-abbd-a4a3aa409a69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter groups",
					"item": [
						{
							"name": "Standard filters + 1 group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_orientation=False&well_status=OTHER&match_any=false&filter_group={\"owner_full_name\": \"Smith\", \"match_any\": false}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_orientation",
											"value": "False"
										},
										{
											"key": "well_status",
											"value": "OTHER"
										},
										{
											"key": "match_any",
											"value": "false"
										},
										{
											"key": "filter_group",
											"value": "{\"owner_full_name\": \"Smith\", \"match_any\": false}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Standard filters + 2 groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/wells?well_orientation=True&well_status=OTHER&match_any=true&filter_group={\"surface_seal_material\": \"BNTITE_CLY\"}&filter_group={\"owner_full_name\": \"MOUNTED\", \"match_any\": true}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"wells"
									],
									"query": [
										{
											"key": "well_orientation",
											"value": "True"
										},
										{
											"key": "well_status",
											"value": "OTHER"
										},
										{
											"key": "match_any",
											"value": "true"
										},
										{
											"key": "filter_group",
											"value": "{\"surface_seal_material\": \"BNTITE_CLY\"}"
										},
										{
											"key": "filter_group",
											"value": "{\"owner_full_name\": \"MOUNTED\", \"match_any\": true}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e31e5df7-1aa3-482a-98ab-7805868da3cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1590f10-c38c-4fb2-9ce6-93ba9fd3c5eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ordering",
			"item": [
				{
					"name": "ordering param (on id plate ascending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"const ascResultSort = (a, b) => {",
									"  if (a === null){",
									"    return 1;",
									"  }",
									"  else if (b === null) {",
									"    return -1;",
									"  }",
									"  else if (a < b) {",
									"    return -1;",
									"  }",
									"  else if (b < a) {",
									"    return 1;",
									"  }",
									"  else {",
									"    return 0;",
									"  }",
									"};",
									"",
									"pm.test(\"Result ordered by id plate ascending\", function () {",
									"  const ascIdPlates = pm.response.json().results.map(result => result.identification_plate_number).sort(ascResultSort);",
									"  pm.response.json().results.forEach((result, index) => {",
									"    const expectedIdPlate = ascIdPlates[index];",
									"    pm.expect(result.identification_plate_number).to.equal(expectedIdPlate);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?ordering=identification_plate_number",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "ordering",
									"value": "identification_plate_number"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ordering param (on consturction start date ascending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"const ascResultSort = (a, b) => {",
									"  if (a === null){",
									"    return 1;",
									"  }",
									"  else if (b === null) {",
									"    return -1;",
									"  }",
									"  else if (a < b) {",
									"    return -1;",
									"  }",
									"  else if (b < a) {",
									"    return 1;",
									"  }",
									"  else {",
									"    return 0;",
									"  }",
									"};",
									"",
									"pm.test(\"Result ordered by construction start date ascending\", function () {",
									"  const ascConstructionStartDates = pm.response.json().results.map(result => result.construction_start_date).sort(ascResultSort);",
									"  pm.response.json().results.forEach((result, index) => {",
									"    const expectedConstructionStartDate = ascConstructionStartDates[index];",
									"    pm.expect(result.construction_start_date).to.equal(expectedConstructionStartDate);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?ordering=construction_start_date",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "ordering",
									"value": "construction_start_date"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ordering param (on owner name descending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b92002d-dd3d-4b42-98ff-f11008badceb",
								"exec": [
									"const descResultSort = (a, b) => {",
									"",
									"  if (a === null){",
									"    return -1;",
									"  }",
									"  else if (b === null) {",
									"    return 1;",
									"  }",
									"  else if (a < b) {",
									"    return 1;",
									"  }",
									"  else if (b < a) {",
									"    return -1;",
									"  }",
									"  else {",
									"    return 0;",
									"  }",
									"};",
									"",
									"pm.test(\"Result ordered by owner full name descending\", function () {",
									"  const descFullNames = pm.response.json().results.map(result => result.owner_full_name).sort(descResultSort);",
									"  pm.response.json().results.forEach((result, index) => {",
									"    const expectedFullName = descFullNames[index];",
									"    pm.expect(result.owner_full_name).to.equal(expectedFullName);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/wells?ordering=-owner_full_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "ordering",
									"value": "-owner_full_name"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "489ea538-6706-436a-a3c6-1a7afa02b212",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e815af75-b06c-4767-bf96-ed635dbff9be",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status ok\", function () {",
							"  pm.response.to.be.ok;",
							"});",
							"pm.test(\"At least one result\", function () {",
							"  pm.expect(pm.response.json().count).to.be.at.least(1);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d7a0a824-1538-46a8-b89a-2ffadc41428f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d0c5ca05-8884-48bf-88d3-9dc425dd6ba5",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response is valid JSON\", function () {",
					"  pm.response.to.be.withBody;",
					"  pm.response.to.be.json;",
					"});",
					""
				]
			}
		}
	]
}