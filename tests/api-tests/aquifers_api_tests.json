{
	"info": {
		"_postman_id": "a9491245-0195-4c23-9f7d-ab9d9ea3c394",
		"name": "GWELLS Aquifers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33152761"
	},
	"item": [
		{
			"name": "Codes",
			"item": [
				{
					"name": "Aquifer Codes / Water Use List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/water-use",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"water-use"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Materials List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/materials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Quality Concerns List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/quality-concerns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"quality-concerns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Vulnerability List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/vulnerability",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"vulnerability"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Subtypes List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/subtypes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"subtypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Productivity List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/productivity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"productivity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Demand List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// All tests are written in the folder, not individually for this section"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifer-codes/demand",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifer-codes",
								"demand"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response schema matches\", () => {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"count\": {\"type\": \"number\"},",
							"            \"next\": {\"type\": [\"string\", \"null\"]},",
							"            \"previous\": {\"type\": [\"string\", \"null\"]},",
							"            \"offset\": {\"type\": \"number\"},",
							"            \"results\": {\"type\": \"array\"}",
							"        }",
							"    }",
							"    pm.expect(pm.response.json()).to.be.jsonSchema(schema)",
							"})",
							""
						]
					}
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Aquifer Search using Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifers?search=asdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifers"
							],
							"query": [
								{
									"key": "search",
									"value": "asdf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Search using Invalid Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Count reflects no matching results\", () => {",
									"    pm.expect(response.count).to.equal(0)",
									"})",
									"",
									"pm.test(\"results is an empty array\", () => {",
									"    pm.expect(response.results).to.be.an('array')",
									"    pm.expect((response.results).length).to.equal(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifers?search=aValueThatWillReceiveNoResults",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifers"
							],
							"query": [
								{
									"key": "search",
									"value": "aValueThatWillReceiveNoResults"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Search using ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"count is present and positive integer\", () => {",
									"    pm.expect(response.count).to.equal(1)",
									"    pm.expect((response.results).length).to.equal(1)",
									"})",
									"",
									"pm.test(\"Results contain aquifer with matching id\", () => {",
									"    pm.expect(response.results[0].id).to.equal(1901)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/aquifers?search=1901",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"aquifers"
							],
							"query": [
								{
									"key": "search",
									"value": "1901"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Aquifers List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"pm.environment.set(\"token\", jsonData.access_token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
							"})",
							"",
							"pm.test(\"A token was returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
							"    pm.expect(jsonData.access_token.length).to.be.above(36);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{auth_server}}",
					"host": [
						"{{auth_server}}"
					]
				},
				"description": "Get token (log in)"
			},
			"response": []
		},
		{
			"name": "Create a new Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"pm.environment.set(\"aquifer_id\", jsonData.aquifer_id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test(\"Aquifer aquifer_name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.aquifer_name).to.eql(\"Aquifer Name\");",
							"});",
							"",
							"pm.test(\"Aquifer demand equals name supplied in request\", function () {",
							"    pm.expect(jsonData.demand).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer known_water_use equals name supplied in request\", function () {",
							"    pm.expect(jsonData.known_water_use).to.eql(\"M\");",
							"});",
							"",
							"pm.test(\"Aquifer litho_stratographic_unit equals name supplied in request\", function () {",
							"    pm.expect(jsonData.litho_stratographic_unit).to.eql(\"Aquifer Litho Stratographic Unit\");",
							"});",
							"",
							"pm.test(\"Aquifer location_description equals name supplied in request\", function () {",
							"    pm.expect(jsonData.location_description).to.eql(\"Location Description\");",
							"});",
							"",
							"pm.test(\"Aquifer mapping_year equals name supplied in request\", function () {",
							"    pm.expect(jsonData.mapping_year).to.eql(1991);",
							"});",
							"",
							"pm.test(\"Aquifer material equals name supplied in request\", function () {",
							"    pm.expect(jsonData.material).to.eql(\"Bedrock\");",
							"});",
							"",
							"pm.test(\"Aquifer notes equals name supplied in request\", function () {",
							"    pm.expect(jsonData.notes).to.eql(\"Notes\");",
							"});",
							"",
							"pm.test(\"Aquifer productivity equals name supplied in request\", function () {",
							"    pm.expect(jsonData.productivity).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer quality_concern equals name supplied in request\", function () {",
							"    pm.expect(jsonData.quality_concern).to.eql(\"None\");",
							"});",
							"",
							"pm.test(\"Aquifer subtype equals name supplied in request\", function () {",
							"    pm.expect(jsonData.subtype).to.eql(\"Unconfined sand and gravel - large river system\");",
							"});",
							"",
							"pm.test(\"Aquifer vulnerability equals name supplied in request\", function () {",
							"    pm.expect(jsonData.vulnerability).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer resources length equals length supplied in request\", function () {",
							"    pm.expect(jsonData.resources.length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Aquifer resource name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].name).to.eql(\"resource 1\");",
							"});",
							"",
							"pm.test(\"Aquifer resource url equals url supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].url).to.eql(\"http://www.example.com/\");",
							"});",
							"",
							"pm.test(\"Aquifer resource section code equals section code supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].section_code).to.eql(\"M\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name \",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1991\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": [\n\t\t{ \"name\": \"resource 1\", \"url\": \"http://www.example.com/\", \"section_code\": \"M\" }\n\t]\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Retrieve",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Aquifer aquifer_name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.aquifer_name).to.eql(\"Aquifer Name\");",
							"});",
							"",
							"pm.test(\"Aquifer demand equals name supplied in request\", function () {",
							"    pm.expect(jsonData.demand).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer known_water_use equals name supplied in request\", function () {",
							"    pm.expect(jsonData.known_water_use).to.eql(\"M\");",
							"});",
							"",
							"pm.test(\"Aquifer litho_stratographic_unit equals name supplied in request\", function () {",
							"    pm.expect(jsonData.litho_stratographic_unit).to.eql(\"Aquifer Litho Stratographic Unit\");",
							"});",
							"",
							"pm.test(\"Aquifer location_description equals name supplied in request\", function () {",
							"    pm.expect(jsonData.location_description).to.eql(\"Location Description\");",
							"});",
							"",
							"pm.test(\"Aquifer mapping_year equals name supplied in request\", function () {",
							"    pm.expect(jsonData.mapping_year).to.eql(1991);",
							"});",
							"",
							"pm.test(\"Aquifer material equals name supplied in request\", function () {",
							"    pm.expect(jsonData.material).to.eql(\"Bedrock\");",
							"});",
							"",
							"pm.test(\"Aquifer notes equals name supplied in request\", function () {",
							"    pm.expect(jsonData.notes).to.eql(\"Notes\");",
							"});",
							"",
							"pm.test(\"Aquifer productivity equals name supplied in request\", function () {",
							"    pm.expect(jsonData.productivity).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer quality_concern equals name supplied in request\", function () {",
							"    pm.expect(jsonData.quality_concern).to.eql(\"None\");",
							"});",
							"",
							"pm.test(\"Aquifer vulnerability equals name supplied in request\", function () {",
							"    pm.expect(jsonData.vulnerability).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer resources length equals length supplied in request\", function () {",
							"    pm.expect(jsonData.resources.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name \",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1991\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": []\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Get PUT_URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response contains URL with signature\", function() {",
							"    var jsonData = pm.response.json()",
							"    pm.expect(jsonData.url).to.not.eql(null)",
							"    pm.expect(jsonData.url).to.include(\"X-Amz-Signature\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}/presigned_put_url?filename=file.pdf",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}",
						"presigned_put_url"
					],
					"query": [
						{
							"key": "filename",
							"value": "file.pdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Sections",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response schema matches\", () => {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"count\": {\"type\": \"number\"},",
							"            \"next\": {\"type\": [\"string\", \"null\"]},",
							"            \"previous\": {\"type\": [\"string\", \"null\"]},",
							"            \"offset\": {\"type\": \"number\"},",
							"            \"results\": {\"type\": \"array\"}",
							"        }",
							"    }",
							"    pm.expect(pm.response.json()).to.be.jsonSchema(schema)",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/sections",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"sections"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Aquifer Uploads - Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response 200', () => {",
							"    pm.expect(pm.response.code).to.equal(200)",
							"})",
							"",
							"pm.test('Response contains Public', () => {",
							"    pm.expect(pm.response.json().public).to.be.an('array');",
							"})",
							"",
							"pm.test('Response contains Private', () => {",
							"    pm.expect(pm.response.json().private).to.be.an('array');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}/files",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Aquifer Uploads - Public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response 200', () => {",
							"    pm.expect(pm.response.code).to.equal(200)",
							"})",
							"",
							"pm.test('Response contains Public', () => {",
							"    pm.expect(pm.response.json().public).to.be.an('array');",
							"})",
							"",
							"pm.test('Response does not contain Private', () => {",
							"    pm.expect(!pm.response.json().hasOwnProperty('private'));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}/files",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Edit Returns object",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"pm.test(\"Status code to be 200\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"pm.test(\"Aquifers ID Match\", () => {",
							"    const id = pm.environment.get(\"aquifer_id\")",
							"    pm.expect(response.aquifer_id).to.equal(id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}/edit",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer History",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"pm.test(\"Status code to be 200\", () => {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"pm.test(\"Response is an array\", () => {",
							"    const id = pm.environment.get(\"aquifer_id\")",
							"    pm.expect(response).to.be.an('array')",
							"})",
							"pm.test(\"Response contains correct object schema\", () => {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"diff\": {\"type\": \"object\"},",
							"            \"prev\": {\"type\": \"object\"},",
							"            \"user\": {\"type\": \"string\"},",
							"            \"date\": {\"type\": \"string\"},",
							"            \"name\": {\"type\": \"string\"},",
							"            \"created\": {\"type\": \"boolean\"}",
							"        }",
							"    }",
							"    _.each((response), (item) => {",
							"        pm.expect(item).to.be.jsonSchema(schema);",
							"    })",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers/{{aquifer_id}}/history",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers",
						"{{aquifer_id}}",
						"history"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "KNOWN_AQUIFER_ID",
			"value": "2000",
			"type": "string"
		}
	]
}
