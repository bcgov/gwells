{
	"info": {
		"_postman_id": "75a9c50b-6664-4075-9ab5-9004df093c8d",
		"name": "GWELLS Well API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33152761"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
									"})",
									"",
									"pm.test(\"A token was returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
									"    pm.expect(jsonData.access_token.length).to.be.above(36);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_server}}",
							"host": [
								"{{auth_server}}"
							]
						},
						"description": "Get token (log in)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Wells",
			"item": [
				{
					"name": "General Well Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set limit to 5 to shrink response size for test",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"pm.test(\"Response Object correct\", () => {",
									"    let response = pm.response.json();",
									"    pm.expect(response.hasOwnProperty('count')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('next')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('previous')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('offset')).to.be.true;",
									"    pm.expect(response.results.length).to.be.ok;",
									"})",
									"",
									"pm.environment.set('well_tag_number', pm.response.json().results[0].well_tag_number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/wells?limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lithology Curated Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"pm.test(\"Response Object correct\", () => {",
									"    let response = pm.response.json();",
									"    pm.expect(response.hasOwnProperty('count')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('next')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('previous')).to.be.true;",
									"    pm.expect(response.results.length).to.be.ok;",
									"    response.results.forEach((result) => {",
									"        pm.expect(result.hasOwnProperty('lithologydescription_set')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('well_tag_number')).to.be.true;",
									"    })",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/lithology",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"lithology"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subsurface Curated Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"pm.test(\"Response Object correct\", () => {",
									"    let response = pm.response.json();",
									"    pm.expect(response.hasOwnProperty('count')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('next')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('previous')).to.be.true;",
									"    pm.expect(response.results.length).to.be.ok;",
									"    response.results.forEach((result) => {",
									"        pm.expect(result.hasOwnProperty('lithologydescription_set')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('screen_set')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('well_tag_number')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('static_water_level')).to.be.true;",
									"    })",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/subsurface",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"subsurface"
							]
						}
					},
					"response": []
				},
				{
					"name": "Well Tags Curated Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"pm.test(\"Response Object correct\", () => {",
									"    let response = pm.response.json();",
									"    response.forEach((result) => {",
									"        pm.expect(result.well_tag_number).to.be.a('number');",
									"        pm.expect(result.hasOwnProperty('owner_full_name')).to.be.true;",
									"    })",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Screen sets Curated Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"pm.test(\"Response Object correct\", () => {",
									"    let response = pm.response.json();",
									"    pm.expect(response.hasOwnProperty('count')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('next')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('previous')).to.be.true;",
									"    pm.expect(response.results.length).to.be.ok;",
									"    response.results.forEach((result) => {",
									"        pm.expect(result.hasOwnProperty('screen_set')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('well_yield')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('diameter')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('aquifer')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('well_yield_unit')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('finished_well_depth')).to.be.true;",
									"        pm.expect(result.hasOwnProperty('intended_water_use')).to.be.true;",
									"    })",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/screens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"screens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Well Get Files - Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Response has public/private\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.public).to.be.an('array')",
									"    pm.expect(response.private).to.be.an('array')",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/{{well_tag_number}}/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"{{well_tag_number}}",
								"files"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Well Single Instance Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/{{well_tag_number}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"{{well_tag_number}}"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Wells Get PUT_URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Response contains URL with signature\", function() {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.url).to.not.eql(null)",
									"    pm.expect(jsonData.url).to.include(\"X-Amz-Signature\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/{{well_tag_number}}/presigned_put_url?filename=file.pdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"{{well_tag_number}}",
								"presigned_put_url"
							],
							"query": [
								{
									"key": "filename",
									"value": "file.pdf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Well",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"well_tag_number\", jsonData.well);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"driller_name\": \"Jimithy\",\n\t\"consultant_name\": \"Bobothy\",\n\t\"consultant_company\": \"Inc & Inc\",\n\t\"work_end_date\": \"2018-07-10\",\n\t\"owner_full_name\": \"Holly Homeowner\",\n\t\"work_start_date\": \"2018-07-01\",\n\t\"owner_province_state\": \"BC\",\n\t\"owner_mailing_address\": \"321 Main Street\",\n\t\"owner_city\": \"Anytown\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/submissions/construction?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"submissions",
								"construction"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Submit a submission"
					},
					"response": []
				},
				{
					"name": "Well History Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.test(\"Response 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"pm.test(\"History Object returned\", () => {",
									"    pm.expect(jsonData.hasOwnProperty('history')).to.be.true;",
									"    pm.expect(jsonData.hasOwnProperty('create_user')).to.be.true;",
									"    pm.expect(jsonData.hasOwnProperty('create_date')).to.be.true;",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/{{well_tag_number}}/history",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"{{well_tag_number}}",
								"history"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				},
				{
					"name": "Well History Search Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.test(\"Status 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"pm.test(\"Results returned Search Object\", () => {",
									"    pm.expect(jsonData.hasOwnProperty('count')).to.be.true;",
									"    pm.expect(jsonData.hasOwnProperty('next')).to.be.true;",
									"    pm.expect(jsonData.hasOwnProperty('previous')).to.be.true;",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"})",
									"",
									"pm.test(\"Results match well_tag_number\", () => {",
									"    const well_tag_number = pm.environment.get('well_tag_number');",
									"    pm.expect(jsonData.results[0].well).to.equal(well_tag_number);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/wells/{{well_tag_number}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wells",
								"{{well_tag_number}}",
								"submissions"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				}
			]
		}
	]
}
