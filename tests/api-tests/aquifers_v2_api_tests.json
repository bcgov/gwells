{
	"info": {
		"_postman_id": "94caf24b-33e4-4b1e-9d5a-2a73fa47cfad",
		"name": "GWELLS Aquifers v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46c51db8-8a25-45d5-941f-f55f682ab9b6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
									"})",
									"",
									"pm.test(\"A token was returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
									"    pm.expect(jsonData.access_token.length).to.be.above(36);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_server}}",
							"host": [
								"{{auth_server}}"
							]
						},
						"description": "Get token (log in)"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Codes",
			"item": [
				{
					"name": "Aquifer Codes / Water Use List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/water-use",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"water-use"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Materials List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/materials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Quality Concerns List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/quality-concerns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"quality-concerns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Vulnerability List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/vulnerability",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"vulnerability"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Subtypes List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/subtypes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"subtypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Productivity List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/productivity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"productivity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer Codes / Demand List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifer-codes/demand",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifer-codes",
								"demand"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Aquifer filter by aquifer_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e291aa1f-95f3-4ca8-8e6c-f88b496980ba",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifers?aquifer_id=123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifers"
							],
							"query": [
								{
									"key": "aquifer_id",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Aquifer name search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ab4ef72-57cb-4c27-8b88-2cb379cab83c",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v2/aquifers?search=asdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifers"
							],
							"query": [
								{
									"key": "search",
									"value": "asdf"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bulk",
			"item": [
				{
					"name": "Create Aquifer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f3aa783-2831-40f6-a4f9-3ccf241c44aa",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"bulk_aquifer_id\", jsonData.aquifer_id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name \",\n\t\"area\":\"10\",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1991\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": [\n\t\t{ \"name\": \"resource 1\", \"url\": \"http://www.example.com/\", \"section_code\": \"M\" }\n\t]\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/aquifers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"aquifers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Well",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a45223c-da07-49be-adc9-95919a90e263",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"bulk_well_tag_number\", jsonData.well);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"driller_name\": \"Jimithy\",\n\t\"consultant_name\": \"Bobothy\",\n\t\"consultant_company\": \"Inc & Inc\",\n\t\"work_end_date\": \"2018-07-10\",\n\t\"owner_full_name\": \"Holly Homeowner\",\n\t\"work_start_date\": \"2018-07-01\",\n\t\"owner_province_state\": \"BC\",\n\t\"owner_mailing_address\": \"321 Main Street\",\n\t\"owner_city\": \"Anytown\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/submissions/construction?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"submissions",
								"construction"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Submit a submission"
					},
					"response": []
				},
				{
					"name": "Returns Invalid well_tag_numbers and aquifer_ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a189545-04ff-4d92-ac73-24de257fb899",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"   pm.expect(pm.response.code).to.equal(400);",
									"})",
									"",
									"pm.test(\"Unknown aquifers is [999999]\", function () {",
									"   pm.expect(jsonData.unknownAquifers).to.eql([999999]);",
									"})",
									"",
									"pm.test(\"Unknown wells is [999999,999998,999997]\", function () {",
									"   pm.expect(jsonData.unknownWells).to.eql([999997,999998,999999]);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"aquiferId\": 999999,\n\t\t\"wellTagNumbers\": [999999,999998,999997]\n\t}\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/bulk/well-aquifer-correlation?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"bulk",
								"well-aquifer-correlation"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "POSTs to /aquifer/bulk to change many wells at once to all point to new aquifers."
					},
					"response": []
				},
				{
					"name": "Returns valid changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f247ba01-7d63-42d2-b922-d505b57838de",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var aquifer_id = pm.environment.get('bulk_aquifer_id')",
									"var well_tag_number = pm.environment.get('bulk_well_tag_number')",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"   pm.expect(pm.response.code).to.equal(400);",
									"})",
									"",
									"pm.test(\"Changes are returned\", function () {",
									"   pm.expect(jsonData.changes[well_tag_number]).to.be.an('object');",
									"   pm.expect(jsonData.changes[well_tag_number]).to.include({action: 'new', aquiferId: aquifer_id });",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"aquiferId\": {{bulk_aquifer_id}},\n\t\t\"wellTagNumbers\": [{{bulk_well_tag_number}}]\n\t}\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/bulk/well-aquifer-correlation?format=json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"bulk",
								"well-aquifer-correlation"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "POSTs to /aquifer/bulk to change many wells at once to all point to new aquifers."
					},
					"response": []
				},
				{
					"name": "Commits changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f247ba01-7d63-42d2-b922-d505b57838de",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var aquifer_id = pm.environment.get('bulk_aquifer_id')",
									"var well_tag_number = pm.environment.get('bulk_well_tag_number')",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.expect(pm.response.code).to.equal(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "JWT {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"aquiferId\": {{bulk_aquifer_id}},\n\t\t\"wellTagNumbers\": [{{bulk_well_tag_number}}]\n\t}\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/v2/bulk/well-aquifer-correlation?format=json&commit=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"bulk",
								"well-aquifer-correlation"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								},
								{
									"key": "commit",
									"value": ""
								}
							]
						},
						"description": "POSTs to /aquifer/bulk to change many wells at once to all point to new aquifers."
					},
					"response": []
				},
				{
					"name": "Confirm well aquifer correlation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebc2262c-3d93-4e5f-aa48-4904501c525a",
								"exec": [
									"var jsonData = pm.response.json()",
									"var aquifer_id = pm.environment.get('bulk_aquifer_id')",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test(\"Well's correlated aquifer is set\", function () {",
									"    pm.expect(jsonData.aquifer).to.equal(aquifer_id);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v2/wells/{{bulk_well_tag_number}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v2",
								"wells",
								"{{bulk_well_tag_number}}"
							]
						},
						"description": "Request a list of wells"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Aquifers List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85664ee3-92d9-4510-b7d8-6bd6c44ec870",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f3aa783-2831-40f6-a4f9-3ccf241c44aa",
						"exec": [
							"var jsonData = pm.response.json()",
							"pm.environment.set(\"aquifer_id\", jsonData.aquifer_id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test(\"Aquifer aquifer_name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.aquifer_name).to.eql(\"Aquifer Name\");",
							"});",
							"",
							"pm.test(\"Aquifer demand equals name supplied in request\", function () {",
							"    pm.expect(jsonData.demand).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer known_water_use equals name supplied in request\", function () {",
							"    pm.expect(jsonData.known_water_use).to.eql(\"M\");",
							"});",
							"",
							"pm.test(\"Aquifer litho_stratographic_unit equals name supplied in request\", function () {",
							"    pm.expect(jsonData.litho_stratographic_unit).to.eql(\"Aquifer Litho Stratographic Unit\");",
							"});",
							"",
							"pm.test(\"Aquifer location_description equals name supplied in request\", function () {",
							"    pm.expect(jsonData.location_description).to.eql(\"Location Description\");",
							"});",
							"",
							"pm.test(\"Aquifer mapping_year equals name supplied in request\", function () {",
							"    pm.expect(jsonData.mapping_year).to.eql(1991);",
							"});",
							"",
							"pm.test(\"Aquifer material equals name supplied in request\", function () {",
							"    pm.expect(jsonData.material).to.eql(\"Bedrock\");",
							"});",
							"",
							"pm.test(\"Aquifer notes equals name supplied in request\", function () {",
							"    pm.expect(jsonData.notes).to.eql(\"Notes\");",
							"});",
							"",
							"pm.test(\"Aquifer productivity equals name supplied in request\", function () {",
							"    pm.expect(jsonData.productivity).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer quality_concern equals name supplied in request\", function () {",
							"    pm.expect(jsonData.quality_concern).to.eql(\"None\");",
							"});",
							"",
							"pm.test(\"Aquifer subtype equals name supplied in request\", function () {",
							"    pm.expect(jsonData.subtype).to.eql(\"Unconfined sand and gravel - large river system\");",
							"});",
							"",
							"pm.test(\"Aquifer vulnerability equals name supplied in request\", function () {",
							"    pm.expect(jsonData.vulnerability).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer resources length equals length supplied in request\", function () {",
							"    pm.expect(jsonData.resources.length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Aquifer resource name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].name).to.eql(\"resource 1\");",
							"});",
							"",
							"pm.test(\"Aquifer resource url equals url supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].url).to.eql(\"http://www.example.com/\");",
							"});",
							"",
							"pm.test(\"Aquifer resource section code equals section code supplied in request\", function () {",
							"    pm.expect(jsonData.resources[0].section_code).to.eql(\"M\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name \",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1991\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": [\n\t\t{ \"name\": \"resource 1\", \"url\": \"http://www.example.com/\", \"section_code\": \"M\" }\n\t]\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"aquifers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Shapefile",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768133b0-7dd6-4197-97ca-ddca5cb1743f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "JWT {{token}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "geometry",
							"type": "file",
							"src": "./files/square-shapefile.zip"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}/geometry",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}",
						"geometry"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Retrieve",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768133b0-7dd6-4197-97ca-ddca5cb1743f",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response contains geom\", function() {",
							"    pm.expect(jsonData.geom).to.not.eql(null)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cfe894ea-0d9f-4b92-8857-34eb257915ab",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Aquifer aquifer_name equals name supplied in request\", function () {",
							"    pm.expect(jsonData.aquifer_name).to.eql(\"Aquifer Name Updated\");",
							"});",
							"",
							"pm.test(\"Aquifer demand equals name supplied in request\", function () {",
							"    pm.expect(jsonData.demand).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer known_water_use equals name supplied in request\", function () {",
							"    pm.expect(jsonData.known_water_use).to.eql(\"M\");",
							"});",
							"",
							"pm.test(\"Aquifer litho_stratographic_unit equals name supplied in request\", function () {",
							"    pm.expect(jsonData.litho_stratographic_unit).to.eql(\"Aquifer Litho Stratographic Unit\");",
							"});",
							"",
							"pm.test(\"Aquifer location_description equals name supplied in request\", function () {",
							"    pm.expect(jsonData.location_description).to.eql(\"Location Description\");",
							"});",
							"",
							"pm.test(\"Aquifer mapping_year equals name supplied in request\", function () {",
							"    pm.expect(jsonData.mapping_year).to.eql(1992);",
							"});",
							"",
							"pm.test(\"Aquifer material equals name supplied in request\", function () {",
							"    pm.expect(jsonData.material).to.eql(\"Bedrock\");",
							"});",
							"",
							"pm.test(\"Aquifer notes equals name supplied in request\", function () {",
							"    pm.expect(jsonData.notes).to.eql(\"Notes\");",
							"});",
							"",
							"pm.test(\"Aquifer productivity equals name supplied in request\", function () {",
							"    pm.expect(jsonData.productivity).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer quality_concern equals name supplied in request\", function () {",
							"    pm.expect(jsonData.quality_concern).to.eql(\"None\");",
							"});",
							"",
							"pm.test(\"Aquifer vulnerability equals name supplied in request\", function () {",
							"    pm.expect(jsonData.vulnerability).to.eql(\"High\");",
							"});",
							"",
							"pm.test(\"Aquifer resources length equals length supplied in request\", function () {",
							"    pm.expect(jsonData.resources.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"aquifer_name\":\"Aquifer Name Updated\",\n\t\"demand\":\"H\",\n\t\"known_water_use\":\"M\",\n\t\"litho_stratographic_unit\":\"Aquifer Litho Stratographic Unit\",\n\t\"location_description\":\"Location Description\",\n\t\"mapping_year\":\"1992\",\n\t\"material\":\"B\",\n\t\"notes\":\"Notes\",\n\t\"productivity\":\"H\",\n\t\"quality_concern\":\"N\",\n\t\"subtype\":\"1a\",\n\t\"vulnerability\":\"H\",\n\t\"resources\": []\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer Get PUT_URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768133b0-7dd6-4197-97ca-ddca5cb1743f",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response contains URL with signature\", function() {",
							"    var jsonData = pm.response.json()",
							"    pm.expect(jsonData.url).to.not.eql(null)",
							"    pm.expect(jsonData.url).to.include(\"X-Amz-Signature\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}/presigned_put_url?filename=file.pdf",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}",
						"presigned_put_url"
					],
					"query": [
						{
							"key": "filename",
							"value": "file.pdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Aquifer History",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768133b0-7dd6-4197-97ca-ddca5cb1743f",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response is length 2\", function() {",
							"    pm.expect(jsonData.length).to.equal(2)",
							"})",
							"",
							"pm.test(\"Latest history is correct\", function() {",
							"    latestHistoryItem = jsonData[0]",
							"    pm.expect(latestHistoryItem.diff.aquifer_name).to.equal('Aquifer Name Updated')",
							"    pm.expect(latestHistoryItem.diff.area).to.equal(20.803)",
							"    pm.expect(latestHistoryItem.diff.mapping_year).to.equal(1992)",
							"    pm.expect(latestHistoryItem.diff).to.have.property('geom')",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}/history",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}",
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retire Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cfe894ea-0d9f-4b92-8857-34eb257915ab",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"retire_date\": \"2020-01-01T00:00:00Z\"\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retired Aquifers List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a882f11-c10d-44ee-a3b9-1915ce90baff",
						"exec": [
							"var jsonData = pm.response.json()",
							"var aquifer_id = pm.environment.get(\"aquifer_id\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Response is greater then zero\", function() {",
							"    pm.expect(jsonData.count).to.be.above(0)",
							"})",
							"",
							"pm.test(\"Retired Aquifer found\", function () {",
							"    const aquifer = jsonData.results.find((aquifer) => {",
							"        return aquifer.aquifer_id === aquifer_id",
							"    });",
							"    pm.expect(aquifer).to.be.an('object');",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unpublish Aquifer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd8fff75-07d1-4eff-865d-3a88ccadb210",
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"retire_date\": \"9999-12-31T00:00:00Z\",\n\t\"effective_date\": \"2000-01-01T00:00:00Z\",\n\t\"expiry_date\": \"2020-01-01T00:00:00Z\"\n}\n"
				},
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers/{{aquifer_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers",
						"{{aquifer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logged-in views unpublished Aquifers List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42917a15-1f0e-445e-ba78-3a5171313c13",
						"exec": [
							"var jsonData = pm.response.json()",
							"var aquifer_id = pm.environment.get(\"aquifer_id\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test(\"Unpublished Aquifer found\", function () {",
							"    const aquifer = jsonData.results.find((aquifer) => {",
							"        return aquifer.aquifer_id === aquifer_id",
							"    });",
							"    pm.expect(aquifer).to.be.an('object');",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/aquifers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"aquifers"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f9450125-5f57-42f0-8051-68351ac89ee4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "53a4f702-7db1-42f2-9f23-f26312363bee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a2df1849-1a25-4497-b5b9-1bd98a4862bb",
			"key": "KNOWN_AQUIFER_ID",
			"value": "2000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
