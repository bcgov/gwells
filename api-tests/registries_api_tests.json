{
	"info": {
		"_postman_id": "78c45691-2533-486f-af0c-78cac2d05f53",
		"name": "GWELLS API remote",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticated user",
			"description": null,
			"item": [
				{
					"name": "Log in",
					"description": null,
					"item": [
						{
							"name": "Log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46c51db8-8a25-45d5-941f-f55f682ab9b6",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json()",
											"pm.environment.set(\"token\", jsonData.access_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code, \"Login was not successful\").to.equal(200);",
											"})",
											"",
											"pm.test(\"A token was returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.access_token, \"a token was not returned\").to.be.ok;",
											"    pm.expect(jsonData.access_token.length).to.be.above(36);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{test_user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test_password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_server}}",
									"host": [
										"{{auth_server}}"
									]
								},
								"description": "Get token (log in)"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Organizations",
					"description": "Tests for organizations endpoint\n/registries/organizations/",
					"item": [
						{
							"name": "Company create new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ce89229-b4af-45c3-8645-ef507a84011c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 201\").to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_guid\", jsonData.org_guid);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.org_guid);",
											"        pm.expect(match, \"primary key not in UUID format\").to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.org_guid);",
											"    });",
											"    ",
											"    pm.test(\"Organization name equals name supplied in request\", function () {",
											"        pm.expect(jsonData.name, \"name does not match\").to.eql(\"Steve's Drilling Inc.\");",
											"    });",
											"    ",
											"    pm.test(\"Street address equals value supplied in request\", function () {",
											"        pm.expect(jsonData.street_address, \"address does not match\").to.eql(\"1012 Douglas\");",
											"    });",
											"    ",
											"    pm.test(\"Postal code equals value supplied in request\", function () {",
											"        pm.expect(jsonData.postal_code, \"postal code does not match\").to.eql(\"a1a 1a1\");",
											"    });",
											"    ",
											"    pm.test(\"City should be empty (it wasn't supplied)\", function () {",
											"        pm.expect(jsonData.city, \"city field has unexpected value\").to.not.be.ok;",
											"    });",
											"    ",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Steve's Drilling Inc.",
											"type": "text"
										},
										{
											"key": "street_address",
											"value": "1012 Douglas",
											"type": "text"
										},
										{
											"key": "city",
											"value": "",
											"type": "text"
										},
										{
											"key": "postal_code",
											"value": "a1a 1a1",
											"type": "text"
										},
										{
											"key": "main_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "fax_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "website_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "province_state",
											"value": "BC",
											"type": "text"
										},
										{
											"key": "email",
											"value": "company@example.com",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Company List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5410792d-f57e-4e98-914d-53d126c2ee76",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var created_guid = pm.environment.get(\"created_guid\");",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"List of drilling companies has valid drilling company objects\", function () {",
											"        // First check that our GUID resembles a valid UUID (i.e. we are not testing before created_guid is set)",
											"        pm.expect(created_guid.length).to.eql(36);",
											"",
											"        // Then check that created_guid is in the response body",
											"        pm.expect(jsonData.length).to.be.above(0);",
											"        ",
											"        for (var i; i < jsonData.length; i++) {",
											"            pm.expect(jsonData[i].org_guid.length).to.eql(36);",
											"            pm.expect(jsonData[i].name.length).to.be.ok;",
											"        }",
											"    });",
											"})();",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Organization model \"list\" view"
							},
							"response": []
						},
						{
							"name": "Company names list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d279051b-6ac9-4b71-bc3f-cdb4d8a56827",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    \"use strict\";",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"})();",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/names/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"names",
										""
									]
								},
								"description": "Organization model \"list\" view"
							},
							"response": []
						},
						{
							"name": "Company add notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dae82277-ba57-4c35-a10c-71fa9a94ae1b",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful request (201 CREATED)\", function () {",
											"        pm.expect(pm.response.code).to.eql(201);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Author recorded\", function () {",
											"        pm.expect(jsonData.author).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"Date recorded\", function () {",
											"        pm.expect(jsonData.date).to.be.ok;",
											"    });",
											"",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "note",
											"value": "This is a company note!",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/notes/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										"notes",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update a driller record"
							},
							"response": []
						},
						{
							"name": "Company retrieve (single organization detail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efcb250a-4507-4256-b866-114ec0c7f8b5",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    ",
											"    pm.test(\"Organization name equals name supplied in request (Steve's Drilling Inc.)\", function () {",
											"        pm.expect(jsonData.name).to.eql(\"Steve's Drilling Inc.\");",
											"    });",
											"    ",
											"    pm.test(\"Street address equals value supplied in request (1012 Douglas)\", function () {",
											"        pm.expect(jsonData.street_address).to.eql(\"1012 Douglas\");",
											"    });",
											"    ",
											"    pm.test(\"Postal code equals value supplied in request (a1a 1a1)\", function () {",
											"        pm.expect(jsonData.postal_code).to.eql(\"a1a 1a1\");",
											"    });",
											"    ",
											"    pm.test(\"City should be empty (it wasn't supplied)\", function () {",
											"        pm.expect(jsonData.city).to.not.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Retrieve single organization details"
							},
							"response": []
						},
						{
							"name": "Company update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02f44562-7656-4a7a-a6fa-67a7ee6a1c73",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful request (200 OK)\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"City should now be Victoria\", function () {",
											"        pm.expect(jsonData.city).to.eql(\"Victoria\");",
											"    });",
											"",
											"    pm.test(\"Audit fields (who_updated, when_updated) were filled in by backend\", function () {",
											"        pm.expect(jsonData.update_user.length).to.be.ok;",
											"        pm.expect(jsonData.update_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "city",
											"value": "Victoria",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Company ListCreate Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "665ae006-e823-4f1b-b0d5-17de55f96cd1",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"    ",
											"    pm.test(\"Response body has actions object, with POST object that lists fields\", function () {",
											"        pm.expect(jsonData.actions).to.be.ok;",
											"        pm.expect(jsonData.actions.POST).to.be.ok;",
											"        pm.expect(Object.keys(jsonData.actions.POST).length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Organization list/create endpoint"
							},
							"response": []
						},
						{
							"name": "Company RetrieveUpdateDestroy Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "378cdf34-1e23-4ed1-b845-b0aeaa4c184f",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Organization retrieve/update/destroy endpoint"
							},
							"response": []
						},
						{
							"name": "Company create bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53ca138a-1672-42d7-9d31-db1e281f2a41",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"created_guid_bad_input\", jsonData.org_guid);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.org_guid);",
											"        pm.expect(match).to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.org_guid);",
											"    });",
											"    ",
											"    pm.test(\"Organization name wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.name).to.include(\"Drilling Co\");",
											"        pm.expect(jsonData.name).to.include(\"rest of name\");",
											"        pm.expect(jsonData.name).to.include(\"more name\");",
											"    });",
											"    ",
											"    pm.test(\"Street address wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.street_address).to.include(\"address\");",
											"        pm.expect(jsonData.street_address).to.include(\"rest of address\");",
											"    });",
											"    ",
											"    pm.test(\"City wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.city).to.eql(\"1') or '1';\");",
											"    });",
											"})();"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Drilling Co'; rest of name\\\\/*\\\";more name",
											"type": "text"
										},
										{
											"key": "street_address",
											"value": "address\\\";\\/*-- \\'\\\\';rest of address",
											"type": "text"
										},
										{
											"key": "city",
											"value": "1') or '1';",
											"type": "text"
										},
										{
											"key": "postal_code",
											"value": "",
											"type": "text"
										},
										{
											"key": "main_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "fax_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "website_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "certificate_authority",
											"value": "False",
											"type": "text"
										},
										{
											"key": "province_state",
											"value": "BC",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Attempt to create a driller record with bad input."
							},
							"response": []
						},
						{
							"name": "Company retrieve bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dcc8f03-3e7c-47e7-80c0-3e0d1cab7377",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful GET request (200 OK)\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Organization name wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.name).to.include(\"Drilling Co\");",
											"        pm.expect(jsonData.name).to.include(\"rest of name\");",
											"        pm.expect(jsonData.name).to.include(\"more name\");",
											"    });",
											"    ",
											"    pm.test(\"Street address wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.street_address).to.include(\"address\");",
											"        pm.expect(jsonData.street_address).to.include(\"rest of address\");",
											"    });",
											"    ",
											"    pm.test(\"City wasn't cut off by bad input\", function () {",
											"        pm.expect(jsonData.city).to.eql(\"1') or '1';\");",
											"    });",
											"})();"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "who_created",
											"value": "STH",
											"type": "text"
										},
										{
											"key": "who_updated",
											"value": "",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Drilling Co'; rest of name\\\\/*\\\";more name",
											"type": "text"
										},
										{
											"key": "street_address",
											"value": "address\\\";\\/* \\'\\\\';rest of address",
											"type": "text"
										},
										{
											"key": "city",
											"value": "1') or '1';",
											"type": "text"
										},
										{
											"key": "postal_code",
											"value": "",
											"type": "text"
										},
										{
											"key": "main_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "fax_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "website_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "certificate_authority",
											"value": "False",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid_bad_input}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid_bad_input}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Attempt to retrieve a driller record created with bad input."
							},
							"response": []
						},
						{
							"name": "Company create attempt with missing input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d1b13bb-0660-48c8-9023-8b5ba1884e3e",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Request with missing required input should return 400 Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    ",
											"    pm.test(\"Response body contains useful error message\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"field is required\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "city",
											"value": "Victoria",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Attempt to create a driller record with missing required input."
							},
							"response": []
						},
						{
							"name": "Company delete bad input record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcb137e4-9af8-40fa-a196-1ad0d00b1da4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid_bad_input}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid_bad_input}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete the record that was created with bad input"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Drillers",
					"description": "Tests for drillers endpoint\n/registries/drillers/",
					"item": [
						{
							"name": "Driller get options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0831e40b-ed31-4044-b114-87f148e2764e",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful GET request\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    ",
											"    pm.test(\"Well class code list exists\", function () {",
											"        pm.expect(jsonData['DRILL'].well_class_codes.length).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"Subactivity code list exists\", function () {",
											"        pm.expect(jsonData['DRILL'].subactivity_codes.length).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"AccreditedCertificateCode code list exists\", function () {",
											"        pm.expect(jsonData['DRILL'].accredited_certificate_codes.length).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"Proof of age list exists\", function () {",
											"        pm.expect(jsonData.proof_of_age_codes.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/options/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"options",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller"
							},
							"response": []
						},
						{
							"name": "Driller create new - with registration and applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3a60ebd-f4a3-40b6-9fa4-876b1e71f95d",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_driller_guid\", jsonData.person_guid);",
											"    pm.environment.set(\"driller_audit_name\", jsonData.create_user);",
											"    var applications = jsonData.registrations[0].applications;",
											"    ",
											"    pm.test(\"The registration contains audit fields (create_user, create_date)\", function() {",
											"        pm.expect(jsonData.registrations[0].create_user.length).to.be.ok;",
											"        pm.expect(jsonData.registrations[0].create_date.length).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"The registration contains an application\", function() {",
											"        pm.expect(applications.length).to.eql(2);",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (create_user, create_date) on the application were filled in by backend\", function () {",
											"        pm.expect(applications[0].create_user.length).to.be.ok;",
											"        pm.expect(applications[0].create_date.length).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"The application has the specified primary certificate\", function() {",
											"        pm.expect(applications[0].primary_certificate.acc_cert_guid).to.eql(\"28bf8730-dbb7-4218-8e9f-06bd51f60161\");",
											"    });",
											"    ",
											"    pm.test(\"The application has the specified certificate no\", function() {",
											"        pm.expect(applications[0].primary_certificate_no).to.eql(\"12345\");",
											"    });",
											"    ",
											"    pm.test(\"The application has a subactivity associated\", function() {",
											"        pm.expect(applications[0].subactivity.registries_subactivity_code).to.eql(\"WATER\");",
											"    });",
											"    ",
											"    pm.test(\"The application has a pending status set, with the specified date\", function() {",
											"        pm.expect(applications[0].current_status.code).to.eql(\"P\");",
											"        pm.expect(applications[0].application_recieved_date).to.eql(\"2018-05-02\");",
											"    });",
											"    ",
											"    pm.test(\"The application has proof of age\", function() {",
											"        pm.expect(applications[0].proof_of_age.code).to.eql(\"PASSPORT\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Bobby\",\n  \"surname\": \"Driller\",\n  \"registrations\": [\n  \t{\n  \t\t\"registries_activity\": \"DRILL\", \n  \t\t\"status\": \"ACTIVE\",\n  \t\t\"organization\": \"{{created_guid}}\",\n  \t\t\"applications\": [\n  \t\t{\n  \t\t\t\"subactivity\": {\n  \t\t\t\t\"registries_subactivity_code\": \"WATER\"\n  \t\t\t}, \n  \t\t\t\"primary_certificate\": {\n  \t\t\t\t\"acc_cert_guid\": \"28bf8730-dbb7-4218-8e9f-06bd51f60161\"\n  \t\t\t}, \n  \t\t\t\"primary_certificate_no\": \"12345\",\n  \t\t\t\"current_status\": {\"code\": \"P\"},\n  \t\t\t\"application_recieved_date\": \"2018-05-02\",\n  \t\t\t\"proof_of_age\": { \"code\": \"PASSPORT\"}\n  \t\t},\n  \t\t{\n  \t\t\t\"subactivity\": {\n  \t\t\t\t\"registries_subactivity_code\": \"WATER\"\n  \t\t\t},\n  \t\t\t\"primary_certificate\": {\n  \t\t\t\t\"acc_cert_guid\": \"28bf8730-dbb7-4218-8e9f-06bd51f60161\"\n  \t\t\t},\n  \t\t\t\"primary_certificate_no\": \"67890\",\n  \t\t\t\"current_status\": {\"code\" : \"P\"}\n  \t\t}\n\t\t]\n  }],\n  \"contact_info\": [{\"contact_tel\": \"555-1234\"}]\n}\n"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller, with registrations and applications in one go."
							},
							"response": []
						},
						{
							"name": "Driller delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete driller specified by GUID."
							},
							"response": []
						},
						{
							"name": "Driller create new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a0005d-cae7-447a-b666-63de221afd22",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_driller_guid\", jsonData.person_guid);",
											"    pm.environment.set(\"driller_audit_name\", jsonData.create_user);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.person_guid);",
											"        pm.expect(match).to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.person_guid);",
											"    });",
											"    ",
											"    pm.test(\"Person first name equals name supplied in request\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Driller\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (create_user, create_date) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Bobby\",\n  \"surname\": \"Driller\",\n  \"registrations\": [{\"registries_activity\": \"DRILL\", \"status\": \"ACTIVE\", \"organization\": \"{{created_guid}}\"}],\n  \"contact_info\": [{\"contact_tel\": \"555-1234\"}]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller"
							},
							"response": []
						},
						{
							"name": "Driller List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d42608d8-fa0e-40ea-974e-3eb2b4cae7ad",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var created_guid = pm.environment.get(\"created_driller_guid\");",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"List of drillers has valid person objects\", function () {",
											"        // First check that our GUID resembles a valid UUID (i.e. we are not testing before created_guid is set)",
											"        pm.expect(created_guid.length).to.eql(36);",
											"",
											"        // Then check that created_guid is in the response body",
											"        pm.expect(jsonData.results.length).to.be.above(0);",
											"",
											"        for (var i; i < jsonData.results.length; i++) {",
											"            pm.expect(jsonData.results[i].person_guid.length).to.eql(36);",
											"            pm.expect(jsonData.results[i].first_name.length).to.be.ok;",
											"            pm.expect(jsonData.results[i].surname.length).to.be.ok;",
											"        }",
											"    });",
											"",
											"    pm.test(\"Pagination: if there are more objects than the page limit, provide a link to the next page\", function () {",
											"        if (jsonData.results.length < jsonData.count) {",
											"            pm.expect(jsonData.next.length).to.be.ok;",
											"        }",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Driller model \"list\" view"
							},
							"response": []
						},
						{
							"name": "Driller Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "166b3bf2-247f-45ab-b5b1-4f726c9e6ffd",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?search=&city=&status=&limit=10&activity=DRILL&ordering=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "city",
											"value": ""
										},
										{
											"key": "status",
											"value": ""
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "activity",
											"value": "DRILL"
										},
										{
											"key": "ordering",
											"value": "0"
										}
									]
								},
								"description": "Driller model \"list\" view"
							},
							"response": []
						},
						{
							"name": "Driller Search Removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "166b3bf2-247f-45ab-b5b1-4f726c9e6ffd",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?search=&city=&status=Removed&limit=10&activity=DRILL&ordering=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "city",
											"value": ""
										},
										{
											"key": "status",
											"value": "Removed"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "activity",
											"value": "DRILL"
										},
										{
											"key": "ordering",
											"value": "0"
										}
									]
								},
								"description": "Driller model \"list\" view"
							},
							"response": []
						},
						{
							"name": "Driller retrieve (single driller detail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa0b48b-bc98-4828-8f2f-48edffca38b6",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    ",
											"    pm.test(\"First name equals name supplied in request (Bobby)\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request (Driller)\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Driller\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields are present and show the user who created the record\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"        pm.expect(jsonData.create_user).to.eql(pm.environment.get(\"driller_audit_name\"));",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Driller model detail view - single driller"
							},
							"response": []
						},
						{
							"name": "Driller retrieve (single driller detail) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa0b48b-bc98-4828-8f2f-48edffca38b6",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    ",
											"    pm.test(\"First name equals name supplied in request (Bobby)\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request (Driller)\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Driller\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields are present and show the user who created the record\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"        pm.expect(jsonData.create_user).to.eql(pm.environment.get(\"driller_audit_name\"));",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Driller model detail view - single driller"
							},
							"response": []
						},
						{
							"name": "Driller update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df2f2a93-db21-480d-baee-d1f71b9c474c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful request (200 OK)\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Last name should now be Drillerson\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Drillerson\");",
											"    });",
											"",
											"    pm.test(\"Audit fields (update_user, update_date) were filled in by backend\", function () {",
											"        pm.expect(jsonData.update_user.length).to.be.ok;",
											"        pm.expect(jsonData.update_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "surname",
											"value": "Drillerson",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update a driller record"
							},
							"response": []
						},
						{
							"name": "Driller add notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dae82277-ba57-4c35-a10c-71fa9a94ae1b",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful request (201 CREATED)\", function () {",
											"        pm.expect(pm.response.code).to.eql(201);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Author recorded\", function () {",
											"        pm.expect(jsonData.author).to.be.ok;",
											"    });",
											"    ",
											"    pm.test(\"Date recorded\", function () {",
											"        pm.expect(jsonData.date).to.be.ok;",
											"    });",
											"",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "note",
											"value": "Experienced groundwater well driller",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/notes/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										"notes",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update a driller record"
							},
							"response": []
						},
						{
							"name": "Driller retrieve after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90c1a570-0bd4-40da-8017-b2adf4277172",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    ",
											"    pm.test(\"First name equals name supplied in request (Bobby)\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request (Drillerson)\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Drillerson\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields are present and show the user who created the record\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"        pm.expect(jsonData.create_user).to.eql(pm.environment.get(\"driller_audit_name\"));",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Driller model detail view - single driller"
							},
							"response": []
						},
						{
							"name": "Driller put",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2d15b29-740b-45c2-b0d1-372297c05a9b",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful request (200 OK)\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Last name should now be Drillerson\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Wells\");",
											"    });",
											"",
											"    pm.test(\"Audit fields (update_user, update_date) were filled in by backend\", function () {",
											"        pm.expect(jsonData.update_date.length).to.be.ok;",
											"        pm.expect(jsonData.update_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "surname",
											"value": "Wells",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "Scott",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Replace a driller record"
							},
							"response": []
						},
						{
							"name": "Driller ListCreate Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6caabd10-a649-4a56-96c3-e1b4bffc917c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"    ",
											"    pm.test(\"Response body has actions object, with POST object that lists fields\", function () {",
											"        pm.expect(jsonData.actions).to.be.ok;",
											"        pm.expect(jsonData.actions.POST).to.be.ok;",
											"        pm.expect(Object.keys(jsonData.actions.POST).length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Driller list/create endpoint"
							},
							"response": []
						},
						{
							"name": "Driller RetrieveUpdateDestroy Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "378cdf34-1e23-4ed1-b845-b0aeaa4c184f",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Driller retrieve/update/destroy endpoint"
							},
							"response": []
						},
						{
							"name": "Driller delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete driller specified by GUID."
							},
							"response": []
						},
						{
							"name": "Company delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete request - deletes drilling organization specified by GUID."
							},
							"response": []
						},
						{
							"name": "Company List after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43017ea1-1f15-4963-9766-15549447a5be",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var created_guid = pm.environment.get(\"created_guid\")",
											"",
											"    pm.test(\"List of drilling companies does not include the created company (successfully deleted)\", function () {",
											"        // First check that our GUID resembles a valid UUID (i.e. we are not testing before created_guid is set)",
											"        pm.expect(created_guid.length).to.eql(36);",
											"        ",
											"        // Then check that created_guid is in the response body",
											"        pm.expect(pm.response.text()).to.not.include(created_guid);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Driller model \"list\" view after deleting record"
							},
							"response": []
						},
						{
							"name": "Company retrieve after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6a004fb-bf4e-4bf7-a966-8252283716b4",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 404\", function () {",
											"        pm.response.to.have.status(404);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Make a get request for the Organization record that was just deleted"
							},
							"response": []
						},
						{
							"name": "Driller retrieve after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6a004fb-bf4e-4bf7-a966-8252283716b4",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 404\", function () {",
											"        pm.response.to.have.status(404);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Make a request for the Driller record that was just deleted"
							},
							"response": []
						},
						{
							"name": "Driller list after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "811923c8-0326-4495-93c3-a88386c39178",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var created_guid = pm.environment.get(\"created_driller_guid\")",
											"",
											"    pm.test(\"List of drillers does not include the deleted driller (successfully deleted)\", function () {",
											"        // First check that our GUID resembles a valid UUID (i.e. we are not testing before created_guid is set)",
											"        pm.expect(created_guid.length).to.eql(36);",
											"        ",
											"        // Then check that created_guid is in the response body",
											"        pm.expect(pm.response.text()).to.not.include(created_guid);",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "List driller records after deleting record, and make sure the deleted driller isn't there"
							},
							"response": []
						},
						{
							"name": "Driller create attempt with missing input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d1b13bb-0660-48c8-9023-8b5ba1884e3e",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Request with missing required input should return 400 Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    ",
											"    pm.test(\"Response body contains useful error message\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"field is required\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Attempt to create a driller record with missing required input."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Registrations",
					"description": "Well driller or well pump installer registration records for individuals",
					"item": [
						{
							"name": "Create new driller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a0005d-cae7-447a-b666-63de221afd22",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_driller_guid\", jsonData.person_guid);",
											"    pm.environment.set(\"driller_audit_name\", jsonData.create_user);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.person_guid);",
											"        pm.expect(match).to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.person_guid);",
											"    });",
											"    ",
											"    pm.test(\"Person first name equals name supplied in request\", function () {",
											"        pm.expect(jsonData.first_name).to.eql(\"Bobby\");",
											"    });",
											"    ",
											"    pm.test(\"Last name equals value supplied in request\", function () {",
											"        pm.expect(jsonData.surname).to.eql(\"Driller\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (create_user, create_date) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length).to.be.ok;",
											"        pm.expect(jsonData.create_date.length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "Bobby",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Driller",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new driller to be registered"
							},
							"response": []
						},
						{
							"name": "Create new registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f9d5aeb-c509-41f6-8043-fe9cdfc8f4df",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 201\").to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_registration_guid\", jsonData.register_guid);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.register_guid);",
											"        pm.expect(match, \"primary key not in UUID format\").to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.register_guid);",
											"    });",
											"    ",
											"    pm.test(\"Registration is active\", function () {",
											"        pm.expect(jsonData.status, \"not active\").to.eql(\"ACTIVE\");",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (who_created, when_created) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length, \"create_user not present\").to.be.ok;",
											"        pm.expect(jsonData.create_date.length, \"create_date not present\").to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "person",
											"value": "{{created_driller_guid}}",
											"type": "text"
										},
										{
											"key": "registries_activity",
											"value": "DRILL",
											"type": "text"
										},
										{
											"key": "status",
											"value": "ACTIVE",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create company for driller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d48d1ed-c85e-414b-b644-394fb538720c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 201\").to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_guid\", jsonData.org_guid);",
											"    ",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.org_guid);",
											"        pm.expect(match, \"primary key not in UUID format\").to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.org_guid);",
											"    });",
											"    ",
											"    pm.test(\"Organization name equals name supplied in request\", function () {",
											"        pm.expect(jsonData.name, \"name does not match\").to.eql(\"Steve's Drilling Inc.\");",
											"    });",
											"    ",
											"    pm.test(\"Street address equals value supplied in request\", function () {",
											"        pm.expect(jsonData.street_address, \"address does not match\").to.eql(\"1012 Douglas\");",
											"    });",
											"    ",
											"    pm.test(\"Postal code equals value supplied in request\", function () {",
											"        pm.expect(jsonData.postal_code, \"postal code does not match\").to.eql(\"a1a 1a1\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Steve's Drilling Inc.",
											"type": "text"
										},
										{
											"key": "street_address",
											"value": "1012 Douglas",
											"type": "text"
										},
										{
											"key": "city",
											"value": "Drillerville",
											"type": "text"
										},
										{
											"key": "postal_code",
											"value": "a1a 1a1",
											"type": "text"
										},
										{
											"key": "main_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "fax_tel",
											"value": "",
											"type": "text"
										},
										{
											"key": "website_url",
											"value": "",
											"type": "text"
										},
										{
											"key": "province_state",
											"value": "BC",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d004a6a-680b-4ee1-b678-6468b609eabd",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Registration number updated\", function () {",
											"        pm.expect(jsonData.registration_no, \"registration number not updated\").to.eql(\"12345\");",
											"    });",
											"",
											"    pm.test(\"Audit fields (who_created, when_created) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length, \"create_user not present\").to.be.ok;",
											"        pm.expect(jsonData.create_date.length, \"create_date not present\").to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "registration_no",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "organization",
											"value": "{{created_guid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/{{created_registration_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										"{{created_registration_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Edit registration record"
							},
							"response": []
						},
						{
							"name": "Registration ListCreate Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6caabd10-a649-4a56-96c3-e1b4bffc917c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"    ",
											"    pm.test(\"Response body has actions object, with POST object that lists fields\", function () {",
											"        pm.expect(jsonData.actions).to.be.ok;",
											"        pm.expect(jsonData.actions.POST).to.be.ok;",
											"        pm.expect(Object.keys(jsonData.actions.POST).length).to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Registration list/create endpoint"
							},
							"response": []
						},
						{
							"name": "Registration RetrieveUpdateDestroy Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "378cdf34-1e23-4ed1-b845-b0aeaa4c184f",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response describes allowed actions for this endpoint\", function () {",
											"        pm.response.to.have.header(\"Allow\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Options for Driller retrieve/update/destroy endpoint"
							},
							"response": []
						},
						{
							"name": "Registration List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16535aba-50f2-4758-a288-46fe0fc9c939",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"List of registrations has valid objects\", function () {",
											"        // First check that our GUID resembles a valid UUID (i.e. we are not testing before created_guid is set)",
											"",
											"        pm.expect(jsonData.results.length).to.be.above(0);",
											"",
											"        for (var i; i < jsonData.results.length; i++) {",
											"            pm.expect(jsonData.results[i].person.length).to.eql(36);",
											"            pm.expect(jsonData.results[i].person_name.length).to.be.ok;",
											"        }",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Registration \"list\" view"
							},
							"response": []
						},
						{
							"name": "Create new application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "057a38f0-186d-4185-8756-817da5e2860c",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 201\").to.be.oneOf([201,202]);",
											"    });",
											"    ",
											"    var jsonData = pm.response.json()",
											"    pm.environment.set(\"created_application_guid\", jsonData.application_guid);",
											"",
											"    pm.test(\"The record's identifier is in UUID format\", function () {",
											"        var uuid_re = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/;",
											"        var match = uuid_re.exec(jsonData.application_guid);",
											"        pm.expect(match, \"primary key not in UUID format\").to.be.ok;",
											"        pm.expect(match.length).to.be.ok;",
											"        pm.expect(match[0]).to.eql(jsonData.application_guid);",
											"    });",
											"    ",
											"    pm.test(\"Application is pending\", function () {",
											"        pm.expect(jsonData.current_status.code).to.eql('P')",
											"    });",
											"    ",
											"    pm.test(\"Audit fields (who_created, when_created) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length, \"create_user not present\").to.be.ok;",
											"        pm.expect(jsonData.create_date.length, \"create_date not present\").to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"registration\": \"{{created_registration_guid}}\",\n\t\"subactivity\": {\n\t\t\"registries_subactivity_code\":\"WATER\"\n\t}\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new application for a registration"
							},
							"response": []
						},
						{
							"name": "Update application - Pending, Water",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0830db16-5679-4af2-9fe5-13912c8122d2",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The record's current status is Pending\", function () {",
											"        pm.expect(jsonData.current_status.code, \"current status not P\").to.eql(\"P\");",
											"    });",
											"    ",
											"    pm.test(\"The record's subactivity is WATER\", function () {",
											"        pm.expect(jsonData.subactivity.registries_subactivity_code, \"current status not WATER\").to.eql(\"WATER\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"subactivity\": {\n\t\"registries_subactivity_code\":\"WATER\"\n  },\n  \"current_status\": {\n    \"code\": \"P\"\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new application for a registration"
							},
							"response": []
						},
						{
							"name": "Update application - Active, Geotech",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24086669-1849-4506-99cb-5d6f095d79bf",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The record's current status is Active\", function () {",
											"        pm.expect(jsonData.current_status.code, \"current status not A\").to.eql(\"A\");",
											"    });",
											"    ",
											"    pm.test(\"The record's subactivity is GEOTECH\", function () {",
											"        pm.expect(jsonData.subactivity.registries_subactivity_code, \"current status not GEOTECH\").to.eql(\"GEOTECH\");",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"subactivity\": \n\t{\n\t\t\"registries_subactivity_code\":\"GEOTECH\"\n\t},\n\t\"current_status\": {\n\t\t\"code\": \"A\"\n\t}\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Create a new application for a registration"
							},
							"response": []
						},
						{
							"name": "Update application - Classification and Qualification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28c548a6-75c6-481f-bfba-b93de721d3e6",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The record's subactivity is WATER\", function () {",
											"        pm.expect(jsonData.subactivity.registries_subactivity_code, \"current status not WATER\").to.eql(\"WATER\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate.acc_cert_guid, \"primary_certificate not correct\").to.eql(\"28bf8730-dbb7-4218-8e9f-06bd51f60161\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate no is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate_no, \"primary_certificate_no not correct\").to.eql(\"12345\");",
											"    });",
											"    ",
											"    pm.test(\"The records proof of age is correct\", function() {",
											"        pm.expect(jsonData.proof_of_age.code, \"proof_of_age not correct\").to.eql(\"PASSPORT\");",
											"    });",
											"",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \t\"subactivity\": {\n\t\t\"registries_subactivity_code\":\"WATER\"\n\t},\n\t\"primary_certificate\":\n\t{\n\t\t\"acc_cert_guid\":\"28bf8730-dbb7-4218-8e9f-06bd51f60161\"\n\t},\n  \t\"primary_certificate_no\": \"12345\",\n  \t\"proof_of_age\": {\n  \t\t\"code\": \"PASSPORT\"\n  \t}\n  }"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update an application for a registration."
							},
							"response": []
						},
						{
							"name": "Update application - Adjudication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b7800e7-0118-4d99-ad80-53504e81245a",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The record's subactivity is WATER\", function () {",
											"        pm.expect(jsonData.subactivity.registries_subactivity_code, \"current status not WATER\").to.eql(\"WATER\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate.acc_cert_guid, \"primary_certificate not correct\").to.eql(\"28bf8730-dbb7-4218-8e9f-06bd51f60161\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate no is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate_no, \"primary_certificate_no not correct\").to.eql(\"12345\");",
											"    });",
											"    ",
											"    pm.test(\"The records proof of age is correct\", function() {",
											"        pm.expect(jsonData.proof_of_age.code, \"proof_of_age not correct\").to.eql(\"PASSPORT\");",
											"    });",
											"    ",
											"    pm.test(\"Application recieved date set correctly\", function() {",
											"        pm.expect(jsonData.application_recieved_date, \"application_recieved_date\").to.eql(\"2018-01-01\")",
											"    })",
											"    ",
											"    pm.test(\"Current state is correct\", function() {",
											"        pm.expect(jsonData.current_status.code).to.eql(\"A\")",
											"    });",
											"    ",
											"    pm.test(\"Reason denied populated\", function() {",
											"       pm.expect(jsonData.reason_denied).to.eql(\"Something\") ",
											"    });",
											"    ",
											"    pm.test(\"Removal date is correct\", function() {",
											"        pm.expect(jsonData.removal_date).to.eql(\"2018-01-01\")",
											"    });",
											"    ",
											"    pm.test(\"Removal reason is correct\", function() {",
											"        pm.expect(jsonData.removal_reason.code).to.eql(\"NLACT\")",
											"    });",
											"",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subactivity\": {\n    \"registries_subactivity_code\":\"WATER\"\n  },\n  \"primary_certificate\":\n  {\n    \"acc_cert_guid\":\"28bf8730-dbb7-4218-8e9f-06bd51f60161\"\n  },\n    \"primary_certificate_no\": \"12345\",\n    \"proof_of_age\": {\n      \"code\": \"PASSPORT\"\n    },\n    \"current_status\": {\"code\": \"A\"},\n    \"reason_denied\": \"Something\",\n    \"application_recieved_date\": \"2018-01-01\",\n    \"removal_date\": \"2018-01-01\",\n    \"removal_reason\": {\"code\": \"NLACT\"}\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update an application for a registration."
							},
							"response": []
						},
						{
							"name": "Update application - Adjudication No Removal Reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6286180b-7d36-4867-accf-2ab0183dd146",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful POST request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The record's subactivity is WATER\", function () {",
											"        pm.expect(jsonData.subactivity.registries_subactivity_code, \"current status not WATER\").to.eql(\"WATER\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate.acc_cert_guid, \"primary_certificate not correct\").to.eql(\"28bf8730-dbb7-4218-8e9f-06bd51f60161\");",
											"    });",
											"    ",
											"    pm.test(\"The records primary certificate no is correct\", function() {",
											"        pm.expect(jsonData.primary_certificate_no, \"primary_certificate_no not correct\").to.eql(\"12345\");",
											"    });",
											"    ",
											"    pm.test(\"The records proof of age is correct\", function() {",
											"        pm.expect(jsonData.proof_of_age.code, \"proof_of_age not correct\").to.eql(\"PASSPORT\");",
											"    });",
											"    ",
											"    pm.test(\"Application recieved date set correctly\", function() {",
											"        pm.expect(jsonData.application_recieved_date, \"application_recieved_date\").to.eql(\"2018-01-01\")",
											"    })",
											"    ",
											"    pm.test(\"Current state is correct\", function() {",
											"        pm.expect(jsonData.current_status.code).to.eql(\"A\")",
											"    });",
											"    ",
											"    pm.test(\"Reason denied populated\", function() {",
											"       pm.expect(jsonData.reason_denied).to.eql(\"Something\") ",
											"    });",
											"    ",
											"    pm.test(\"Removal date is correct\", function() {",
											"        pm.expect(jsonData.removal_date).to.eql(\"2018-01-01\")",
											"    });",
											"    ",
											"    pm.test(\"Removal reason is correct\", function() {",
											"        pm.expect(jsonData.removal_reason).to.eql(null)",
											"    });",
											"",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \t\"subactivity\": {\n\t\t\"registries_subactivity_code\":\"WATER\"\n\t},\n\t\"primary_certificate\":\n\t{\n\t\t\"acc_cert_guid\":\"28bf8730-dbb7-4218-8e9f-06bd51f60161\"\n\t},\n  \t\"primary_certificate_no\": \"12345\",\n  \t\"proof_of_age\": {\n  \t\t\"code\": \"PASSPORT\"\n  \t},\n  \t\"current_status\": {\"code\": \"A\"},\n  \t\"reason_denied\": \"Something\",\n  \t\"application_recieved_date\": \"2018-01-01\",\n  \t\"removal_date\": \"2018-01-01\",\n  \t\"removal_reason\": {\"code\": null}\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Update an application for a registration."
							},
							"response": []
						},
						{
							"name": "Get registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba74aa9a-9a61-4f39-8238-255246e63f7f",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful GET request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json()",
											"",
											"    pm.test(\"Registration has a person\", function () {",
											"        pm.expect(jsonData.person.length, \"registration not attached to a person\").to.eql(36);",
											"        pm.expect(jsonData.person_name, \"person name not available\").to.be.ok",
											"    });",
											"",
											"    pm.test(\"Audit fields (who_created, when_created) were filled in by backend\", function () {",
											"        pm.expect(jsonData.create_user.length, \"create_user not present\").to.be.ok;",
											"        pm.expect(jsonData.create_date.length, \"create_date not present\").to.be.ok;",
											"    });",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "registration_no",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/{{created_registration_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										"{{created_registration_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Get registration record"
							},
							"response": []
						},
						{
							"name": "Get application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "337686ad-df95-478d-86ee-3a224ae76602",
										"type": "text/javascript",
										"exec": [
											"( function() {",
											"    pm.test(\"Successful GET request\", function () {",
											"        pm.expect(pm.response.code, \"response code not 200\").to.eql(200);",
											"    });",
											"    var jsonData = pm.response.json()",
											"})();",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "registration_no",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Get registration record"
							},
							"response": []
						},
						{
							"name": "Application delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/applications/{{created_application_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"applications",
										"{{created_application_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete application specified by GUID."
							},
							"response": []
						},
						{
							"name": "Registration delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/registrations/{{created_registration_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"registrations",
										"{{created_registration_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete application specified by GUID."
							},
							"response": []
						},
						{
							"name": "Driller delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/drillers/{{created_driller_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"drillers",
										"{{created_driller_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete application specified by GUID."
							},
							"response": []
						},
						{
							"name": "Company delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a743a15a-6712-486a-9310-5d1261bb03c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{created_guid}}/?format=json",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{created_guid}}",
										""
									],
									"query": [
										{
											"key": "format",
											"value": "json"
										}
									]
								},
								"description": "Delete request - deletes drilling organization specified by GUID."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}